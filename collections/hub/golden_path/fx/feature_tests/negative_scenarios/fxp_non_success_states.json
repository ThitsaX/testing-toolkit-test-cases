{
  "options": {},
  "name": "fxp_error",
  "test_cases": [
    {
      "id": 2,
      "name": "Check ABORTED state in PUT /fxTransfers/{ID}",
      "fileInfo": {
        "path": "hub/golden_path/fx/feature_tests/negative_scenarios/fxp_non_success_states.json",
        "labels": [
          "fx"
        ]
      },
      "meta": {
        "info": "POST /fxTransfers returns PUT /fxTransfers/{ID} with ABORTED state"
      },
      "requests": [
        {
          "id": 1,
          "description": "Get payer position before fxTransfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin",
            "specFile": "spec_files/api_definitions/central_admin_1.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/central_admin_1.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/central_admin_1.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/central_admin_1.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/central_admin_1.0/trigger_templates"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.FX_PAYER_DFSP_ID}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.FX_PAYER_DFSP_ID}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "res.filter(account => account.currency === environment.FX_SOURCE_CURRENCY).forEach(curAccount => {",
                "",
                "  if(curAccount.ledgerAccountType === \"POSITION\") {",
                "    environment.payerPositionBalanceBeforeFxTransfer= curAccount.value",
                "  }",
                "})",
                "",
                "console.log(`Payer Position Balance before FxTransfer=${environment.payerPositionBalanceBeforeFxTransfer}`);",
                "",
                ""
              ]
            }
          }
        },
        {
          "id": 2,
          "description": "POST /fxTransfers",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "fspiop",
            "asynchronous": true,
            "specFile": "spec_files/api_definitions/fspiop_2.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/fspiop_2.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/fspiop_2.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/fspiop_2.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/fspiop_2.0/trigger_templates"
          },
          "operationPath": "/fxTransfers",
          "path": "/fxTransfers",
          "method": "post",
          "url": "{$inputs.HOST_ML_API_ADAPTER}",
          "headers": {
            "Accept": "{$inputs.acceptFxTransfers}",
            "Content-Type": "{$inputs.contentTypeFxTransfers}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.FX_PAYER_DFSP_ID}"
          },
          "body": {
            "commitRequestId": "{$function.generic.generateUUID}",
            "determiningTransferId": "{$function.generic.generateUUID}",
            "initiatingFsp": "{$inputs.FX_PAYER_DFSP_ID}",
            "counterPartyFsp": "{$inputs.FX_TESTFXP1_ID}",
            "amountType": "SEND",
            "sourceAmount": {
              "currency": "{$inputs.FX_SOURCE_CURRENCY}",
              "amount": "14"
            },
            "targetAmount": {
              "currency": "{$inputs.FX_TARGET_CURRENCY}",
              "amount": "{$inputs.FX_TARGET_AMOUNT}"
            },
            "condition": "{$inputs.validCondition}",
            "expiration": "{$requestVariables.expiration}"
          },
          "scriptingEngine": "javascript",
          "disabled": false,
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 2,
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": 3,
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": 4,
                "description": "Callback FSP Destination equal to request FSP Source",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": 5,
                "description": "Callback body should contain errorInformation code",
                "exec": [
                  "expect(response.body.errorInformation).to.have.property('errorCode')"
                ]
              },
              {
                "id": 6,
                "description": "Callback body should contain errorInformation description",
                "exec": [
                  "expect(response.body.errorInformation).to.have.property('errorDescription')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "requestVariables.expiration =new Date(new Date().getTime() + 24 * 60 * 60 * 1000).toISOString()"
              ]
            }
          },
          "params": {
            "name": ""
          }
        },
        {
          "id": 3,
          "description": "Get payer position after fxTransfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin",
            "specFile": "spec_files/api_definitions/central_admin_1.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/central_admin_1.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/central_admin_1.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/central_admin_1.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/central_admin_1.0/trigger_templates"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.FX_PAYER_DFSP_ID}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.FX_PAYER_DFSP_ID}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "res.filter(account => account.currency === environment.FX_SOURCE_CURRENCY).forEach(curAccount => {",
                "  if(curAccount.ledgerAccountType === \"POSITION\") {",
                "    environment.payerPositionBalanceAfterFxTransfer= curAccount.value",
                "  }",
                "})",
                "",
                "console.log(`Payer Position Balance after Transfer=${environment.payerPositionBalanceAfterFxTransfer}`);"
              ]
            }
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Payer position should not be changed",
                "exec": [
                  "expect(environment.payerPositionBalanceAfterFxTransfer).to.equal(environment.payerPositionBalanceBeforeFxTransfer)"
                ]
              }
            ]
          }
        }
      ]
    }
  ]
}