{
  "options": {
    "breakOnError": false,
    "transformerName": "none",
    "generateIDType": "ulid"
  },
  "name": "hub_golden_path_negative_scenarios_parties_negative",
  "test_cases": [
    {
      "id": "GET-parties-with",
      "name": "GET parties with missing headers",
      "fileInfo": {
        "path": "hub/golden_path/negative_scenarios/parties_negative.json"
      },
      "meta": {
        "info": "GET parties with missing headers"
      },
      "requests": [
        {
          "id": "1",
          "description": "GET /parties with missing accept header",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "fspiop",
            "asynchronous": true,
            "specFile": "/opt/app/spec_files/api_definitions/fspiop_2.0/api_spec.yaml",
            "callbackMapFile": "/opt/app/spec_files/api_definitions/fspiop_2.0/callback_map.json",
            "responseMapFile": "/opt/app/spec_files/api_definitions/fspiop_2.0/response_map.json",
            "jsfRefFile": "/opt/app/spec_files/api_definitions/fspiop_2.0/mockRef.json",
            "triggerTemplatesFolder": "/opt/app/spec_files/api_definitions/fspiop_2.0/trigger_templates"
          },
          "operationPath": "/parties/{Type}/{ID}",
          "path": "/parties/{Type}/{ID}",
          "method": "get",
          "params": {
            "Type": "",
            "ID": ""
          },
          "url": "{$inputs.HOST_ACCOUNT_LOOKUP_SERVICE}",
          "headers": {
            "Content-Type": "{$inputs.contentTypeParties}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 400",
                "exec": ["expect(response.status).to.equal(400)"]
              },
              {
                "id": 2,
                "description": "Response statusText be Bad Request",
                "exec": ["expect(response.statusText).to.equal('Bad Request')"]
              },
              {
                "id": 3,
                "description": "Response should contain error information",
                "exec": [
                  "expect(response.body).to.have.property('errorInformation')"
                ]
              },
              {
                "id": 4,
                "description": "Response should contain error code",
                "exec": [
                  "expect(response.body.errorInformation).to.have.property('errorCode')"
                ]
              },
              {
                "id": 5,
                "description": "Response should contain Accept",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.include('Accept')"
                ]
              },
              {
                "id": 6,
                "description": "error code should be '3102'",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.include('3102')"
                ]
              }
            ]
          }
        },
        {
          "id": "2",
          "description": "GET /parties with missing content-type header",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "fspiop",
            "asynchronous": true,
            "specFile": "/opt/app/spec_files/api_definitions/fspiop_2.0/api_spec.yaml",
            "callbackMapFile": "/opt/app/spec_files/api_definitions/fspiop_2.0/callback_map.json",
            "responseMapFile": "/opt/app/spec_files/api_definitions/fspiop_2.0/response_map.json",
            "jsfRefFile": "/opt/app/spec_files/api_definitions/fspiop_2.0/mockRef.json",
            "triggerTemplatesFolder": "/opt/app/spec_files/api_definitions/fspiop_2.0/trigger_templates"
          },
          "operationPath": "/parties/{Type}/{ID}",
          "path": "/parties/{Type}/{ID}",
          "method": "get",
          "params": {
            "Type": "",
            "ID": ""
          },
          "url": "{$inputs.HOST_ACCOUNT_LOOKUP_SERVICE}",
          "headers": {
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Accept": "{$inputs.acceptParties}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 400",
                "exec": ["expect(response.status).to.equal(400)"]
              },
              {
                "id": 2,
                "description": "Response statusText be Bad Request",
                "exec": ["expect(response.statusText).to.equal('Bad Request')"]
              },
              {
                "id": 3,
                "description": "Response should contain error information",
                "exec": [
                  "expect(response.body).to.have.property('errorInformation')"
                ]
              },
              {
                "id": 4,
                "description": "Response should contain error code",
                "exec": [
                  "expect(response.body.errorInformation).to.have.property('errorCode')"
                ]
              },
              {
                "id": 5,
                "description": "Response should content-type date",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.include('Content-type')"
                ]
              },
              {
                "id": 6,
                "description": "error code should be '3102'",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.include('3102')"
                ]
              }
            ]
          }
        },
        {
          "id": "3",
          "description": "GET /parties with missing date header",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "fspiop",
            "asynchronous": true,
            "specFile": "/opt/app/spec_files/api_definitions/fspiop_2.0/api_spec.yaml",
            "callbackMapFile": "/opt/app/spec_files/api_definitions/fspiop_2.0/callback_map.json",
            "responseMapFile": "/opt/app/spec_files/api_definitions/fspiop_2.0/response_map.json",
            "jsfRefFile": "/opt/app/spec_files/api_definitions/fspiop_2.0/mockRef.json",
            "triggerTemplatesFolder": "/opt/app/spec_files/api_definitions/fspiop_2.0/trigger_templates"
          },
          "operationPath": "/parties/{Type}/{ID}",
          "path": "/parties/{Type}/{ID}",
          "method": "get",
          "params": {
            "Type": "",
            "ID": ""
          },
          "url": "{$inputs.HOST_ACCOUNT_LOOKUP_SERVICE}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Accept": "{$inputs.acceptParties}",
            "Content-Type": "{$inputs.contentTypeParties}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 400",
                "exec": ["expect(response.status).to.equal(400)"]
              },
              {
                "id": 2,
                "description": "Response statusText be Bad Request",
                "exec": ["expect(response.statusText).to.equal('Bad Request')"]
              },
              {
                "id": 3,
                "description": "Response should contain error information",
                "exec": [
                  "expect(response.body).to.have.property('errorInformation')"
                ]
              },
              {
                "id": 4,
                "description": "Response should contain error code",
                "exec": [
                  "expect(response.body.errorInformation).to.have.property('errorCode')"
                ]
              },
              {
                "id": 5,
                "description": "Response should contain date",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.include('date')"
                ]
              },
              {
                "id": 6,
                "description": "error code should be '3102'",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.include('3102')"
                ]
              }
            ]
          }
        },
        {
          "id": "3-copy",
          "description": "GET /parties with missing date header Copy",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "fspiop",
            "asynchronous": true,
            "specFile": "/opt/app/spec_files/api_definitions/fspiop_2.0/api_spec.yaml",
            "callbackMapFile": "/opt/app/spec_files/api_definitions/fspiop_2.0/callback_map.json",
            "responseMapFile": "/opt/app/spec_files/api_definitions/fspiop_2.0/response_map.json",
            "jsfRefFile": "/opt/app/spec_files/api_definitions/fspiop_2.0/mockRef.json",
            "triggerTemplatesFolder": "/opt/app/spec_files/api_definitions/fspiop_2.0/trigger_templates"
          },
          "operationPath": "/parties/{Type}/{ID}",
          "path": "/parties/{Type}/{ID}",
          "method": "get",
          "params": {
            "Type": "",
            "ID": ""
          },
          "url": "{$inputs.HOST_ACCOUNT_LOOKUP_SERVICE}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Accept": "{$inputs.acceptParties}",
            "Content-Type": "{$inputs.contentTypeParties}",
            "Date": "{$function.generic.curDate}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 400",
                "exec": ["expect(response.status).to.equal(400)"]
              },
              {
                "id": 2,
                "description": "Response statusText be Bad Request",
                "exec": ["expect(response.statusText).to.equal('Bad Request')"]
              },
              {
                "id": 3,
                "description": "Response should contain error information",
                "exec": [
                  "expect(response.body).to.have.property('errorInformation')"
                ]
              },
              {
                "id": 4,
                "description": "Response should contain error code",
                "exec": [
                  "expect(response.body.errorInformation).to.have.property('errorCode')"
                ]
              },
              {
                "id": 5,
                "description": "Response should contain date",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.include('date')"
                ]
              },
              {
                "id": 6,
                "description": "error code should be '3102'",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.include('3102')"
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "id": "2",
      "name": "GET parties with invalid header values",
      "fileInfo": {
        "path": "hub/golden_path/negative_scenarios/parties_negative.json"
      },
      "meta": {
        "info": "GET parties with invalid header values"
      },
      "requests": [
        {
          "id": "1",
          "description": "GET /parties with invalid content header value",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "fspiop",
            "asynchronous": true,
            "specFile": "/opt/app/spec_files/api_definitions/fspiop_2.0/api_spec.yaml",
            "callbackMapFile": "/opt/app/spec_files/api_definitions/fspiop_2.0/callback_map.json",
            "responseMapFile": "/opt/app/spec_files/api_definitions/fspiop_2.0/response_map.json",
            "jsfRefFile": "/opt/app/spec_files/api_definitions/fspiop_2.0/mockRef.json",
            "triggerTemplatesFolder": "/opt/app/spec_files/api_definitions/fspiop_2.0/trigger_templates"
          },
          "operationPath": "/parties/{Type}/{ID}",
          "path": "/parties/{$inputs.toIdType}/{$inputs.toIdValue}",
          "method": "get",
          "params": {
            "Type": "{$inputs.toIdType}",
            "ID": "{$inputs.toIdValue}"
          },
          "url": "{$inputs.HOST_ACCOUNT_LOOKUP_SERVICE}",
          "headers": {
            "Content-Type": "invalidValue",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Accept": "{$inputs.acceptParties}"
          },
          "disabled": false,
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 400",
                "exec": ["expect(response.status).to.equal(400)"]
              },
              {
                "id": 2,
                "description": "Response statusText be Bad Request",
                "exec": ["expect(response.statusText).to.equal('Bad Request')"]
              },
              {
                "id": 3,
                "description": "Response should contain error information",
                "exec": [
                  "expect(response.body).to.have.property('errorInformation')"
                ]
              },
              {
                "id": 4,
                "description": "Response should contain error code",
                "exec": [
                  "expect(response.body.errorInformation).to.have.property('errorCode')"
                ]
              },
              {
                "id": 5,
                "description": "Response should contain content-type header",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.include('Invalid content-type header')"
                ]
              },
              {
                "id": 6,
                "description": "Error code should be '3101'",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.include('3101')"
                ]
              }
            ]
          }
        },
        {
          "id": "2",
          "description": "GET /parties with invalid date header value",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "fspiop",
            "asynchronous": true,
            "specFile": "/opt/app/spec_files/api_definitions/fspiop_2.0/api_spec.yaml",
            "callbackMapFile": "/opt/app/spec_files/api_definitions/fspiop_2.0/callback_map.json",
            "responseMapFile": "/opt/app/spec_files/api_definitions/fspiop_2.0/response_map.json",
            "jsfRefFile": "/opt/app/spec_files/api_definitions/fspiop_2.0/mockRef.json",
            "triggerTemplatesFolder": "/opt/app/spec_files/api_definitions/fspiop_2.0/trigger_templates"
          },
          "operationPath": "/parties/{Type}/{ID}",
          "path": "/parties/{$inputs.toIdType}/{$inputs.toIdValue}",
          "method": "get",
          "params": {
            "Type": "{$inputs.toIdType}",
            "ID": "{$inputs.toIdValue}"
          },
          "url": "{$inputs.HOST_ACCOUNT_LOOKUP_SERVICE}",
          "headers": {
            "Content-Type": "{$inputs.contentTypeParties}",
            "Date": "invalidValue",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Accept": "{$inputs.acceptParties}"
          },
          "disabled": false,
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 400",
                "exec": ["expect(response.status).to.equal(400)"]
              },
              {
                "id": 2,
                "description": "Response statusText be Bad Request",
                "exec": ["expect(response.statusText).to.equal('Bad Request')"]
              },
              {
                "id": 3,
                "description": "Response should contain error information",
                "exec": [
                  "expect(response.body).to.have.property('errorInformation')"
                ]
              },
              {
                "id": 4,
                "description": "Response should contain error code",
                "exec": [
                  "expect(response.body.errorInformation).to.have.property('errorCode')"
                ]
              },
              {
                "id": 5,
                "description": "Response should contain date header",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.include('date header')"
                ]
              },
              {
                "id": 6,
                "description": "Error code should be '3101'",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.include('3101')"
                ]
              }
            ]
          }
        },
        {
          "id": "3",
          "description": "GET /parties with invalid fspiop header value",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "fspiop",
            "asynchronous": true,
            "specFile": "/opt/app/spec_files/api_definitions/fspiop_2.0/api_spec.yaml",
            "callbackMapFile": "/opt/app/spec_files/api_definitions/fspiop_2.0/callback_map.json",
            "responseMapFile": "/opt/app/spec_files/api_definitions/fspiop_2.0/response_map.json",
            "jsfRefFile": "/opt/app/spec_files/api_definitions/fspiop_2.0/mockRef.json",
            "triggerTemplatesFolder": "/opt/app/spec_files/api_definitions/fspiop_2.0/trigger_templates"
          },
          "operationPath": "/parties/{Type}/{ID}",
          "path": "/parties/{$inputs.toIdType}/{$inputs.toIdValue}",
          "method": "get",
          "params": {
            "Type": "{$inputs.toIdType}",
            "ID": "{$inputs.toIdValue}"
          },
          "url": "{$inputs.HOST_ACCOUNT_LOOKUP_SERVICE}",
          "headers": {
            "Content-Type": "{$inputs.contentTypeParties}",
            "Date": "{$function.generic.curDate}",
            "Accept": "{$inputs.acceptParties}",
            "FSPIOP-Source": "invalidFSPIOPText"
          },
          "disabled": false,
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 400",
                "exec": ["expect(response.status).to.equal(400)"]
              },
              {
                "id": 2,
                "description": "Response statusText be Bad Request",
                "exec": ["expect(response.statusText).to.equal('Bad Request')"]
              },
              {
                "id": 3,
                "description": "Response should contain error information",
                "exec": [
                  "expect(response.body).to.have.property('errorInformation')"
                ]
              },
              {
                "id": 4,
                "description": "Response should contain error code",
                "exec": [
                  "expect(response.body.errorInformation).to.have.property('errorCode')"
                ]
              },
              {
                "id": 5,
                "description": "Response should contain fspiop header",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.include('fspiop header')"
                ]
              },
              {
                "id": 6,
                "description": "Error code should be '3101'",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.include('3101')"
                ]
              }
            ]
          }
        },
        {
          "id": "4",
          "description": "GET /parties with invalid accept header value",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "fspiop",
            "asynchronous": true,
            "specFile": "/opt/app/spec_files/api_definitions/fspiop_2.0/api_spec.yaml",
            "callbackMapFile": "/opt/app/spec_files/api_definitions/fspiop_2.0/callback_map.json",
            "responseMapFile": "/opt/app/spec_files/api_definitions/fspiop_2.0/response_map.json",
            "jsfRefFile": "/opt/app/spec_files/api_definitions/fspiop_2.0/mockRef.json",
            "triggerTemplatesFolder": "/opt/app/spec_files/api_definitions/fspiop_2.0/trigger_templates"
          },
          "operationPath": "/parties/{Type}/{ID}",
          "path": "/parties/{$inputs.toIdType}/{$inputs.toIdValue}",
          "method": "get",
          "params": {
            "Type": "{$inputs.toIdType}",
            "ID": "{$inputs.toIdValue}"
          },
          "url": "{$inputs.HOST_ACCOUNT_LOOKUP_SERVICE}",
          "headers": {
            "Content-Type": "{$inputs.contentTypeParties}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Accept": "invalidValue"
          },
          "disabled": false,
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 400",
                "exec": ["expect(response.status).to.equal(400)"]
              },
              {
                "id": 2,
                "description": "Response statusText be Bad Request",
                "exec": ["expect(response.statusText).to.equal('Bad Request')"]
              },
              {
                "id": 3,
                "description": "Response should contain error information",
                "exec": [
                  "expect(response.body).to.have.property('errorInformation')"
                ]
              },
              {
                "id": 4,
                "description": "Response should contain error code",
                "exec": [
                  "expect(response.body.errorInformation).to.have.property('errorCode')"
                ]
              },
              {
                "id": 5,
                "description": "Response should contain accept header",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.include('accept header')"
                ]
              },
              {
                "id": 6,
                "description": "Error code should be '3101'",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.include('3101')"
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "id": "GET-parties-with-1",
      "name": "GET parties with missing parameters in body",
      "fileInfo": {
        "path": "hub/golden_path/negative_scenarios/parties_negative.json"
      },
      "meta": {
        "info": "GET parties with missing parameters in body"
      },
      "requests": []
    }
  ]
}
