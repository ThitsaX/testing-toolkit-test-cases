{
  "name": "multi",
  "test_cases": [
    {
      "id": 1,
      "name": "Reserve Notification Positive - Testfsp1 Testfsp2",
      "requests": [
        {
          "id": 2,
          "description": "Add {{testfsp1MSISDN}} to testfsp1",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator",
            "asynchronous": false,
            "additionalApi": true
          },
          "operationPath": "/repository/parties",
          "path": "/repository/parties",
          "method": "post",
          "url": "{$inputs.TESTFSP1_BACKEND_TESTAPI_URL}",
          "headers": {},
          "body": {
            "displayName": "{$inputs.fullName}",
            "firstName": "{$inputs.firstName}",
            "middleName": "{$inputs.middleName}",
            "lastName": "{$inputs.lastName}",
            "dateOfBirth": "{$inputs.dob}",
            "idType": "MSISDN",
            "idValue": "{$inputs.testfsp1MSISDN}"
          },
          "params": {
            "Type": "",
            "ID": ""
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Successfully POST request",
                "exec": [
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  ",
                  "  expect(response.status).to.be.oneOf([204, 200, 500])",
                  "}"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "environment.fullName = 'Testfsp1First Testfsp1Last'",
                "environment.firstName = 'Testfsp1First'",
                "environment.middleName = 'Testfsp1Middle'",
                "environment.lastName = 'Testfsp1Last'",
                "environment.dob = '2010-10-10'",
                ""
              ]
            }
          }
        },
        {
          "id": 3,
          "description": "Add {{testfsp2MSISDN}} to testfsp2",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator",
            "asynchronous": false,
            "additionalApi": true
          },
          "operationPath": "/repository/parties",
          "path": "/repository/parties",
          "method": "post",
          "url": "{$inputs.TESTFSP2_BACKEND_TESTAPI_URL}",
          "headers": {},
          "body": {
            "displayName": "{$inputs.fullName}",
            "firstName": "{$inputs.firstName}",
            "middleName": "{$inputs.middleName}",
            "lastName": "{$inputs.lastName}",
            "dateOfBirth": "{$inputs.dob}",
            "idType": "MSISDN",
            "idValue": "{$inputs.testfsp2MSISDN}"
          },
          "params": {
            "Type": "",
            "ID": ""
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Successfully POST request",
                "exec": [
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  ",
                  "  expect(response.status).to.be.oneOf([204, 200, 500])",
                  "}"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "environment.fullName = 'Testfsp2First Testfsp2Last'",
                "environment.firstName = 'Testfsp2First'",
                "environment.middleName = 'Testfsp2Middle'",
                "environment.lastName = 'Testfsp2Last'",
                "environment.dob = '2010-10-10'",
                ""
              ]
            }
          }
        },
        {
          "id": 4,
          "description": "Add party to SIMPAYEE - MSISDN",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator",
            "asynchronous": false,
            "additionalApi": true
          },
          "operationPath": "/repository/parties",
          "path": "/repository/parties",
          "method": "post",
          "url": "{$inputs.TESTFSP1_BACKEND_TESTAPI_URL}",
          "headers": {},
          "body": {
            "displayName": "PayeeFirst PayeeLast",
            "firstName": "PayeeFirst",
            "middleName": "PayeeMiddle",
            "lastName": "PayeeLast",
            "dateOfBirth": "2010-10-10",
            "idType": "MSISDN",
            "idValue": "{$inputs.testfsp2MSISDN}"
          },
          "params": {
            "Type": "",
            "ID": ""
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Successfully POST request",
                "exec": [
                  "if (environment.TEST_NOTIFICATIONS) {",
                  "  ",
                  "  expect(response.status).to.be.oneOf([204, 200, 500])",
                  "}"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            }
          }
        },
        {
          "id": 5,
          "description": "Post scenarios - MSISDN - SIMPAYER to SIMPAYEE - PATCH notification",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP2_BACKEND_TESTAPI_URL}",
          "ignoreCallbacks": false,
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "PayerFirst PayerLast",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp2MSISDN}"
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$input.testfsp1MSISDN}"
                },
                "amountType": "SEND",
                "currency": "{$inputs.SIMPAYER_CURRENCY}",
                "amount": "10",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.status).to.equal(200)",
                  "}"
                ]
              },
              {
                "id": 2,
                "description": "Payer name matches",
                "exec": [
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario1.result.from.displayName).to.equal(environment.payerName)",
                  "}"
                ]
              },
              {
                "id": 3,
                "description": "Payer idType is 'MSISDN'",
                "exec": [
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario1.result.from.idType).to.equal('MSISDN')",
                  "}"
                ]
              },
              {
                "id": 4,
                "description": "Payer idValue matches",
                "exec": [
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario1.result.from.idValue).to.equal(environment.testfsp2MSISDN)",
                  "}"
                ]
              },
              {
                "id": 5,
                "description": "Payee idType is 'MSISDN'",
                "exec": [
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario1.result.to.idType).to.equal('MSISDN')",
                  "}"
                ]
              },
              {
                "id": 6,
                "description": "Payee idValue matches",
                "exec": [
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario1.result.to.idType).to.equal('MSISDN')",
                  "}"
                ]
              },
              {
                "id": 7,
                "description": "Payee fspId is \"testfsp1\"",
                "exec": [
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario1.result.to.fspId).to.equal('testfsp1')",
                  "}"
                ]
              },
              {
                "id": 8,
                "description": "Payee First name \"Testfsp1First\"",
                "exec": [
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario1.result.to.firstName).to.equal('Testfsp1First')",
                  "}"
                ]
              },
              {
                "id": 9,
                "description": "Payee First name \"Testfsp1Last\" ",
                "exec": [
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario1.result.to.lastName).to.equal('Testfsp1Last')",
                  "}"
                ]
              },
              {
                "id": 10,
                "description": "Payee DOB matches",
                "exec": [
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario1.result.to.dateOfBirth).to.equal('2010-10-10')",
                  "}"
                ]
              },
              {
                "id": 11,
                "description": "Currency matches",
                "exec": [
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario1.result.currency).to.equal('{$inputs.SIMPAYER_CURRENCY}')",
                  "}"
                ]
              },
              {
                "id": 12,
                "description": "Transfer amount matches",
                "exec": [
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario1.result.amount).to.equal('10')",
                  "}"
                ]
              },
              {
                "id": 13,
                "description": "Transaction type is 'TRANSFER'",
                "exec": [
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario1.result.transactionType).to.equal('TRANSFER')",
                  "}"
                ]
              },
              {
                "id": 14,
                "description": "Initiator type is 'CONSUMER'",
                "exec": [
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario1.result.initiatorType).to.equal('CONSUMER')",
                  "}"
                ]
              },
              {
                "id": 15,
                "description": "Note matches",
                "exec": [
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario1.result.note).to.equal('test payment')",
                  "}"
                ]
              },
              {
                "id": 16,
                "description": "transferId matches",
                "exec": [
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario1.result.transferId).to.equal('test payment')",
                  "}"
                ]
              },
              {
                "id": 17,
                "description": "Home transaction ID matches",
                "exec": [
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario1.result.homeTransactionId).to.equal('123ABC')",
                  "}"
                ]
              },
              {
                "id": 18,
                "description": "Current state on quote is 'COMPLETED'",
                "exec": [
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario1.result.currentState).to.equal('COMPLETED')",
                  "}"
                ]
              },
              {
                "id": 19,
                "description": "Transfer amount matches",
                "exec": [
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario1.result.quoteResponse.transferAmount.amount).to.equal('10')",
                  "}"
                ]
              },
              {
                "id": 20,
                "description": "Currency matches",
                "exec": [
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario1.result.quoteResponse.transferAmount.currency).to.equal(environment.SIMPAYER_CURRENCY)",
                  "}"
                ]
              },
              {
                "id": 21,
                "description": "Quote response expiration is not null",
                "exec": [
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario1.result.quoteResponse.expiration).to.not.equal(undefined)",
                  "}"
                ]
              },
              {
                "id": 22,
                "description": "Quote request ILP packet is not null",
                "exec": [
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario1.result.quoteResponse.ilpPacket).to.not.equal(undefined)",
                  "}"
                ]
              },
              {
                "id": 23,
                "description": "Quote response condition is not null",
                "exec": [
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario1.result.quoteResponse.condition).to.not.equal(undefined)",
                  "}"
                ]
              },
              {
                "id": 24,
                "description": "Payee Fee amount is 0",
                "exec": [
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario1.result.payeeFspFee.amount).to.equal('0')",
                  "}"
                ]
              },
              {
                "id": 25,
                "description": "Payee fee currency matches",
                "exec": [
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario1.result.payeeFspFee.currency).to.equal(environment.SIMPAYEE_CURRENCY)",
                  "}"
                ]
              },
              {
                "id": 26,
                "description": "Payer FSP name matches",
                "exec": [
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.from.displayName).to.equal(environment.payerName)",
                  "}"
                ]
              },
              {
                "id": 27,
                "description": "IdType is 'MSISDN'",
                "exec": [
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.from.idType).to.equal('MSISDN')",
                  "}"
                ]
              },
              {
                "id": 28,
                "description": "Payer MSISDN matches",
                "exec": [
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.to.idValue).to.equal(environment.testfsp2MSISDN)",
                  "}"
                ]
              },
              {
                "id": 29,
                "description": "IdType is 'MSISDN'",
                "exec": [
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.to.idType).to.equal('MSISDN')",
                  "}"
                ]
              },
              {
                "id": 30,
                "description": "Receiver MSISDN value matches",
                "exec": [
                  "",
                  "",
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.to.idValue).to.equal(environment.testfsp1MSISDN)",
                  "}"
                ]
              },
              {
                "id": 31,
                "description": "fspId is 'testfsp1'",
                "exec": [
                  "",
                  "",
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.to.fspId).to.equal('testfsp1')",
                  "}"
                ]
              },
              {
                "id": 32,
                "description": "First name of the party matches",
                "exec": [
                  "",
                  "",
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.to.firstName).to.equal('Testfsp1First')",
                  "}"
                ]
              },
              {
                "id": 33,
                "description": "Last name of the party matches",
                "exec": [
                  "",
                  "",
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.to.firstName).to.equal('Testfsp1Last')",
                  "}"
                ]
              },
              {
                "id": 34,
                "description": "Date of Birth of the MSISDN is '2010-10-10'",
                "exec": [
                  "",
                  "",
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.to.dateOfBirth).to.equal('2010-10-10')",
                  "}"
                ]
              },
              {
                "id": 35,
                "description": "Amount-Type in Quote request is 'SEND'",
                "exec": [
                  "",
                  "",
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.amountType).to.equal('SEND')",
                  "}"
                ]
              },
              {
                "id": 36,
                "description": "Currency in Quote request matches",
                "exec": [
                  "",
                  "",
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.currency).to.equal(environment.SIMPAYER_CURRENCY)",
                  "}"
                ]
              },
              {
                "id": 37,
                "description": "Transfer amount is '10'",
                "exec": [
                  "",
                  "",
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.amount).to.equal('10')",
                  "}"
                ]
              },
              {
                "id": 38,
                "description": "Transaction type is 'TRANSFER'",
                "exec": [
                  "",
                  "",
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.transactionType).to.equal('TRANSFER')",
                  "}"
                ]
              },
              {
                "id": 39,
                "description": "Initiator type is 'CONSUMER'",
                "exec": [
                  "",
                  "",
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.initiatorType).to.equal('CONSUMER')",
                  "}"
                ]
              },
              {
                "id": 40,
                "description": "Note matches",
                "exec": [
                  "",
                  "",
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.note).to.equal('test payment')",
                  "}"
                ]
              },
              {
                "id": 41,
                "description": "HomeTransactionId is 123ABC",
                "exec": [
                  "",
                  "",
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.homeTrasnactionId).to.equal('123ABC')",
                  "}"
                ]
              },
              {
                "id": 42,
                "description": "Current state of the transfer is COMPLETED",
                "exec": [
                  "",
                  "",
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.currentState).to.equal('COMPLETED')",
                  "}"
                ]
              },
              {
                "id": 43,
                "description": "Transfer Amount is '10'",
                "exec": [
                  "",
                  "",
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.quoteResponse.transferAmount.amount).to.equal('10')",
                  "}"
                ]
              },
              {
                "id": 44,
                "description": "Response validation: Currency matches",
                "exec": [
                  "",
                  "",
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.quoteResponse.transferAmount.currency).to.equal(environment.SIMPAYER_CURRENCY)",
                  "}"
                ]
              },
              {
                "id": 45,
                "description": "Quote expiration is not null",
                "exec": [
                  "",
                  "",
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.quoteResponse.expiration).to.not.equal(null)",
                  "}"
                ]
              },
              {
                "id": 46,
                "description": "Response ilpPacket is not null",
                "exec": [
                  "",
                  "",
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.quoteResponse.ilpPacket).to.not.equal(null)",
                  "}"
                ]
              },
              {
                "id": 47,
                "description": "Response condition is not null",
                "exec": [
                  "",
                  "",
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.quoteResponse.condition).to.not.equal(null)",
                  "}"
                ]
              },
              {
                "id": 48,
                "description": "PayeeFspFee is '0'",
                "exec": [
                  "",
                  "",
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.quoteResponse.payeeFspFee.amount).to.equal('0')",
                  "}"
                ]
              },
              {
                "id": 49,
                "description": "PayeeFee commission is '0'",
                "exec": [
                  "",
                  "",
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.quoteResponse.payeeFspCommission.amount).to.equal('0')",
                  "}"
                ]
              },
              {
                "id": 50,
                "description": "PayeeFee commission currency matches",
                "exec": [
                  "",
                  "",
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.quoteResponse.payeeFspCommission.currency).to.equal(environment.SIMPAYEE_CURRENCY)",
                  "}"
                ]
              },
              {
                "id": 51,
                "description": "CompletedTimestamp is not empty",
                "exec": [
                  "",
                  "",
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.fulfil.completedTimestamp).to.not.equal(null)",
                  "}"
                ]
              },
              {
                "id": 52,
                "description": "transferState is 'COMMITTED'",
                "exec": [
                  "",
                  "",
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.fulfil.transferState).to.equal('COMMITTED')",
                  "}"
                ]
              },
              {
                "id": 53,
                "description": "Fulfilment is not empty",
                "exec": [
                  "",
                  "",
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.fulfil.fulfilment).to.not.equal(null)",
                  "}"
                ]
              },
              {
                "id": 54,
                "description": "Fulfilment is not empty Copy",
                "exec": [
                  "",
                  "",
                  "if (environment.TES_NOTIFICATIONS) {",
                  "  expect(response.body.scenario2.result.fulfil.fulfilment).to.not.equal(null)",
                  "}"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "environment.expectedPayeeFirstName = \"PayeeFirst\"",
                "environment.expectedPayeeLastName = \"PayeeLast\"",
                "environment.expectedPayeeDOB = \"2010-10-10\"",
                "environment.payerName = \"PayerFirst PayerLast\"",
                "",
                ""
              ]
            }
          }
        }
      ]
    }
  ]
}