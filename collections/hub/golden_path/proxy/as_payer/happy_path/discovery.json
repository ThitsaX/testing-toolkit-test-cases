{
    "name": "Party Lookup Happy Path",
    "test_cases": [
      {
        "id": "1",
        "name": "Party Lookup for ProxyAB if not cached",
        "requests": [
          {
            "id": "1",
            "description": "Send party lookup request",
            "apiVersion": {
              "minorVersion": 1,
              "majorVersion": 1,
              "type": "fspiop",
              "asynchronous": true
            },
            "url": "{$inputs.HOST_ACCOUNT_LOOKUP_SERVICE}",
            "operationPath": "/parties/{Type}/{ID}",
            "method": "get",
            "params": {
              "Type": "{$inputs.PROXY_PAYEEFSP_PARTY_ID_TYPE}",
              "ID": "{$inputs.PROXY_PAYEEFSP_PARTY_ID}"
            },
            "headers": {
              "Accept": "application/vnd.interoperability.parties+json;version=1.0",
              "Content-Type": "application/vnd.interoperability.parties+json;version=1.0",
              "Date": "{$function.generic.curDate}",
              "FSPIOP-Source": "{$inputs.PROXY_PAYERFSP_ID}",
              "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
            },
            "tests": {
                "assertions": [
                  {
                    "id": 1,
                    "description": "Response status to be 202",
                    "exec": [
                      "expect(response.status).to.equal(202)"
                    ]
                  },
                  {
                    "id": 2,
                    "description": "Response Proxy Header should be set",
                    "exec": [
                      "expect(callback.headers['fspiop-proxy']).to.equal('{$inputs.PROXY_HEADER}')"
                    ]
                  },
                  {
                    "id": 3,
                    "description": "Response Source Header same as Payeefsp Id",
                    "exec": [
                      "expect(callback.headers['fspiop-source']).to.equal('{$inputs.PROXY_PAYEEFSP_ID}')"
                    ]
                  },
                  {
                    "id": 4,
                    "description": "Response Destination Header same as Payerfsp Id",
                    "exec": [
                      "expect(callback.headers['fspiop-destination']).to.equal('{$inputs.PROXY_PAYERFSP_ID}')"
                    ]
                  },
                  {
                    "id": 5,
                    "description": "Callback content-type to be parties",
                    "exec": [
                      "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.parties+json;version=1.0')"
                    ]
                  },
                  {
                    "id": 6,
                    "description": "Callback partyIdInfo (partyIdType, partyIdentifier)",
                    "exec": [
                      "expect(callback.body.party.partyIdInfo.partyIdType).to.equal('{$inputs.PROXY_PAYEEFSP_PARTY_ID_TYPE}')"
                    ]
                  },
                  {
                    "id": 7,
                    "description": "Callback partyIdInfo (partyIdType, partyIdentifier)",
                    "exec": [
                      "expect(callback.body.party.partyIdInfo.partyIdentifier).to.equal('{$inputs.PROXY_PAYEEFSP_PARTY_ID}')"
                    ]
                  },
                  {
                    "id": 8,
                    "description": "Callback partyIdInfo (partyIdType, partyIdentifier)",
                    "exec": [
                      "expect(callback.body.party.personalInfo.complexName.firstName).to.equal('{$inputs.PROXY_PAYEEFSP_PARTY_FIRST_NAME}')"
                    ]
                  },
                  {
                    "id": 9,
                    "description": "Callback partyIdInfo (partyIdType, partyIdentifier)",
                    "exec": [
                      "expect(callback.body.party.personalInfo.complexName.lastName).to.equal('{$inputs.PROXY_PAYEEFSP_PARTY_LAST_NAME}')"
                    ]
                  }

                ]
              }
          },
          {
            "id": "2",
            "description": "Send Oracle lookup request",
            "apiVersion": {
              "minorVersion": 1,
              "majorVersion": 1,
              "type": "fspiop",
              "asynchronous": true
            },
            "url": "{$inputs.HOST_ORACLE}",
            "operationPath": "/participants/{Type}/{ID}",
            "method": "get",
            "params": {
                "Type": "{$inputs.PROXY_PAYEEFSP_PARTY_ID_TYPE}",
                "ID": "{$inputs.PROXY_PAYEEFSP_PARTY_ID}"
            },
            "headers": {
              "Accept": "application/vnd.interoperability.participants+json;version=1.0",
              "Content-Type": "application/vnd.interoperability.participants+json;version=1.0",
              "Date": "{$function.generic.curDate}"
            },
            "tests": {
                "assertions": [
                  {
                    "id": 1,
                    "description": "Response status to be 200",
                    "exec": [
                      "expect(response.status).to.equal(200)"
                    ]
                  },
                  {
                    "id": 2,
                    "description": "Oracle has Proxy Payee DFSP set",
                    "exec": [
                      "expect(response.body.partyList[0].fspId).to.equal('{$inputs.PROXY_PAYEEFSP_ID}')"
                    ]
                  }
                ]
              }
          }
        ]
      },
      {
        "id": "2",
        "name": "Party Lookup for other proxy in Scheme if not cached",
        "requests": [
          {
            "id": "1",
            "description": "Send party lookup request",
            "apiVersion": {
              "minorVersion": 1,
              "majorVersion": 1,
              "type": "fspiop",
              "asynchronous": true
            },
            "operationPath": "/parties/{Type}/{ID}",
            "method": "get",
            "params": {
                "Type": "{$inputs.PROXY_PAYEEFSP_OTHER_PROXY_PARTY_ID_TYPE}",
                "ID": "{$inputs.PROXY_PAYEEFSP_OTHER_PROXY_PARTY_ID}"
            },
            "headers": {
                "Accept": "application/vnd.interoperability.parties+json;version=1.0",
                "Content-Type": "application/vnd.interoperability.parties+json;version=1.0",
                "Date": "{$function.generic.curDate}",
                "FSPIOP-Source": "{$inputs.PROXY_PAYERFSP_OTHER_PROXY_ID}",
                "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
            },
            "tests": {
                "assertions": [
                  {
                    "id": 1,
                    "description": "Response status to be 202",
                    "exec": [
                      "expect(response.status).to.equal(202)"
                    ]
                  },
                  {
                    "id": 2,
                    "description": "Response Proxy Header should not be set",
                    "exec": [
                      "expect(callback.headers['fspiop-proxy']).to.equal('')"
                    ]
                  },
                  {
                    "id": 3,
                    "description": "Response Source Header same as TODO",
                    "exec": [
                      "expect('{$callback.headers['FSPIOP-Source']}').to.equal('TODO')"
                    ]
                  },
                  {
                    "id": 4,
                    "description": "Response Destination Header same as Payerfsp Id",
                    "exec": [
                      "expect('{$callback.headers['FSPIOP-Destination']}').to.equal('{$inputs.PROXY_PAYERFSP_ID}')"
                    ]
                  },
                  {
                    "id": 5,
                    "description": "an error callback is expected",
                    "exec": [
                      "expect(callback.errorInformation.errorCode).to.equal('{$inputs.PROXY_PAYERFSP_OTHER_PROXY_ERROR_CODE}')",
                      "expect(callback.errorInformation.errorDescription).to.equal('{$inputs.PROXY_PAYERFSP_OTHER_PROXY_ERROR_DESCRIPTION}')"
                    ]
                  }
                ]
            },
            "disabled": true
          },
          {
            "id": "2",
            "description": "Send Oracle lookup request",
            "apiVersion": {
              "minorVersion": 1,
              "majorVersion": 1,
              "type": "fspiop",
              "asynchronous": true
            },
            "operationPath": "/participants/{Type}/{ID}",
            "method": "get",
            "params": {
              "Type": "{$inputs.toIdType}",
              "ID": "{$inputs.toIdValue}"
            },
            "headers": {
              "Accept": "application/vnd.interoperability.participants+json;version=1.0",
              "Content-Type": "application/vnd.interoperability.participants+json;version=1.0",
              "Date": "{$function.generic.curDate}",
              "FSPIOP-Source": "payerfsp",
              "FSPIOP-Destination": "payeefsp"
            },
            "tests": {
                "assertions": [
                  {
                    "id": 1,
                    "description": "Response status to be 200",
                    "exec": [
                      "expect(response.status).to.equal(200)"
                    ]
                  },
                  {
                    "id": 2,
                    "description": "Oracle should not have payeeDFSP set",
                    "exec": [
                      "expect(response.fspId).to.equal('')"
                    ]
                  }
                ]
            },
            "disabled": true
          }
        ]
      },
      {
        "id": "3",
        "name": "Party Lookup for Proxy in Scheme if it is cached",
        "requests": [
          {
            "id": "1",
            "description": "Send party lookup request",
            "apiVersion": {
              "minorVersion": 1,
              "majorVersion": 1,
              "type": "fspiop",
              "asynchronous": true
            },
            "operationPath": "/parties/{Type}/{ID}",
            "method": "get",
            "params": {
                "Type": "{$inputs.PROXY_PAYEEFSP_OTHER_PROXY_PARTY_ID_TYPE}",
                "ID": "{$inputs.PROXY_PAYEEFSP_OTHER_PROXY_PARTY_ID}"
            },
            "headers": {
                "Accept": "application/vnd.interoperability.parties+json;version=1.0",
                "Content-Type": "application/vnd.interoperability.parties+json;version=1.0",
                "Date": "{$function.generic.curDate}",
                "FSPIOP-Source": "{$inputs.PROXY_PAYERFSP_OTHER_PROXY_ID}",
                "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
            },
            "tests": {
                "assertions": [
                  {
                    "id": 1,
                    "description": "Response status to be 202",
                    "exec": [
                      "expect(response.status).to.equal(202)"
                    ]
                  },
                  {
                    "id": 2,
                    "description": "Response Proxy Header should not be set",
                    "exec": [
                      "expect(callback.headers['fspiop-proxy']).to.equal('')"
                    ]
                  },
                  {
                    "id": 3,
                    "description": "Response Source Header same as TODO",
                    "exec": [
                      "expect('{$callback.headers['FSPIOP-Source']}').to.equal('TODO')"
                    ]
                  },
                  {
                    "id": 4,
                    "description": "Response Destination Header same as Payerfsp Id",
                    "exec": [
                      "expect('{$callback.headers['FSPIOP-Destination']}').to.equal('{$inputs.PROXY_PAYERFSP_ID}')"
                    ]
                  },
                  {
                    "id": 5,
                    "description": "Callback partyIdInfo (partyIdType, partyIdentifier)",
                    "exec": [
                      "expect(callback.body.party.partyIdInfo.partyIdType).to.equal('{$inputs.PROXY_PAYEEFSP_PARTY_ID_TYPE}')",
                      "expect(callback.body.party.partyIdInfo.partyIdentifier).to.equal('{$inputs.PROXY_PAYEEFSP_PARTY_ID}')",
                      "expect(callback.body.party.partyIdInfo.partyIdentifier).to.equal('{$inputs.PROXY_PAYEEFSP_PARTY_FIRST_NAME}')",
                      "expect(callback.body.party.partyIdInfo.partyIdentifier).to.equal('{$inputs.PROXY_PAYEEFSP_PARTY_LAST_NAME}')"
                    ]
                  }
                ]
            },
            "disabled": true
          },
          {
            "id": "2",
            "description": "Send Oracle lookup request",
            "apiVersion": {
              "minorVersion": 1,
              "majorVersion": 1,
              "type": "fspiop",
              "asynchronous": true
            },
            "operationPath": "/participants/{Type}/{ID}",
            "method": "get",
            "params": {
              "Type": "{$inputs.toIdType}",
              "ID": "{$inputs.toIdValue}"
            },
            "headers": {
              "Accept": "application/vnd.interoperability.participants+json;version=1.0",
              "Content-Type": "application/vnd.interoperability.participants+json;version=1.0",
              "Date": "{$function.generic.curDate}",
              "FSPIOP-Source": "payerfsp",
              "FSPIOP-Destination": "payeefsp"
            },
            "tests": {
                "assertions": [
                  {
                    "id": 1,
                    "description": "Response status to be 200",
                    "exec": [
                      "expect(response.status).to.equal(200)"
                    ]
                  },
                  {
                    "id": 2,
                    "description": "Oracle should not have payeeDFSP set",
                    "exec": [
                      "expect(response.fspId).to.equal('')"
                    ]
                  }
                ]
            },
            "disabled": true
          }
        ]
      }
    ]
  }