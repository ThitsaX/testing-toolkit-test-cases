{
  "name": "multi",
  "test_cases": [
    {
      "id": 1,
      "name": "Close current open window and store data for all closed windows",
      "meta": {
        "info": "Close current open window and store data for all closed windows"
      },
      "fileInfo": {
        "path": "run-settlements.json"
      },
      "requests": [
        {
          "id": 1,
          "meta": {
            "info": "Get Existing Open Window"
          },
          "description": "Get Existing Open Window",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows",
          "path": "/settlementWindows",
          "method": "get",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "queryParams": {
            "state": "OPEN"
          },
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "State should be OPEN",
                "exec": [
                  "expect(environment.openWindowstate).to.equal(\"OPEN\")"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "//console.log(jsonData.state);",
                "",
                "environment.openWindowID=jsonData[0].settlementWindowId;",
                "environment.openWindowstate=jsonData[0].state;",
                "",
                "console.log(environment.openWindowID);"
              ]
            }
          }
        },
        {
          "id": 2,
          "meta": {
            "info": "Close existing open window"
          },
          "description": "Close existing open window",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows/{id}",
          "path": "/settlementWindows/{$environment.openWindowID}",
          "method": "post",
          "params": {
            "id": "{$environment.openWindowID}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "body": {
            "state": "CLOSED",
            "reason": "string"
          },
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200 or 400",
                "exec": [
                  "if(response.status === 400){",
                  "  expect(response.status).to.equal(400)",
                  "}",
                  "else{",
                  "  expect(response.status).to.equal(200)",
                  "}",
                  "",
                  ""
                ]
              },
              {
                "id": 2,
                "description": "New window State should be OPEN",
                "exec": [
                  "",
                  " if (response.status === 400) {",
                  "   ",
                  "expect(response.body.errorInformation.errorCode).to.eql('3100');",
                  "expect(response.body.errorInformation.errorDescription).to.eql('Generic validation error - Window ' + environment.openWindowID + ' is empty');",
                  "}else{",
                  "  ",
                  "  ",
                  "  expect(environment.openWindowstate).to.equal(\"OPEN\");",
                  "}",
                  "",
                  "",
                  ""
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "if(response.status === 400){",
                "  environment.isFailed = true;",
                "}",
                "var jsonData = response.body;",
                "var rcode = Number(response.status);",
                "//console.log(rcode);",
                "",
                "//if (rcode == 200){",
                "environment.closedWindowID= Number(environment.openWindowID);",
                "environment.openWindowstate=jsonData.state;",
                "",
                "console.log(environment.openWindowstate);",
                "console.log(environment.closedWindowID);",
                "//}",
                "await custom.sleep(5000);"
              ]
            }
          }
        },
        {
          "id": 3,
          "meta": {
            "info": "Get list of all Closed Windows"
          },
          "description": "Get list of all Closed Windows",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows",
          "path": "/settlementWindows",
          "method": "get",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "queryParams": {
            "state": "CLOSED"
          },
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 200/400",
                "exec": [
                  "if(response.status === 400){",
                  "  expect(response.status).to.equal(400)",
                  "}",
                  "else{",
                  "  expect(response.status).to.equal(200)",
                  "}",
                  "",
                  ""
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                "if(environment.isFailed === true) {",
                "   custom.skipRequest();",
                " }"
              ]
            },
            "postRequest": {
              "exec": [
                "environment.closedWindowsData = response.body;"
              ]
            }
          }
        },
        {
          "id": 4,
          "meta": {
            "info": "get settlements models"
          },
          "description": "get settlements models",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/settlementModels",
          "path": "/settlementModels",
          "method": "get",
          "scriptingEngine": "javascript",
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "if(environment.isFailed === true) {",
                "   custom.skipRequest();",
                " }"
              ]
            },
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "environment.settlementModels = { deferred: {}}",
                "for (const sm of jsonData) {",
                "  if (sm.settlementDelay === 'DEFERRED') {",
                "    if (sm.currency === null) {",
                "      environment.settlementModels.deferred.default = sm.name",
                "    } else {",
                "      if (sm.name === 'DEFERREDNETUSD') {",
                "        environment.settlementModels.deferred[sm.currency] = sm.name",
                "      }",
                "    }",
                "  }",
                "}",
                "",
                "console.log(environment.settlementModels)"
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2,
      "name": "Run deferred currency settlement model for all the closed windows",
      "meta": {
        "info": "Run deferred currency settlement model for all the closed windows"
      },
      "fileInfo": {
        "path": "run-settlements.json"
      },
      "requests": [
        {
          "id": 1,
          "meta": {
            "info": "Create Settlement for all Closed Windows in deferred settlement model for currency"
          },
          "description": "Create Settlement for all Closed Windows in deferred settlement model for currency",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements",
          "path": "/settlements",
          "method": "post",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "body": {
            "settlementModel": "{$requestVariables.settlementModel}",
            "reason": "TESTING",
            "settlementWindows": []
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                "requestVariables.settlementModel = environment.settlementModels.deferred[environment.currency];",
                "var settlementWindows = [];",
                "environment.closedWindowsData.forEach(closedWindow => {",
                "  let windowData = {",
                "    id: closedWindow.settlementWindowId",
                "  };",
                "  settlementWindows.push(windowData);",
                "});",
                "",
                "custom.appendRequestBody({",
                "  settlementWindows: settlementWindows",
                "});"
              ]
            },
            "postRequest": {
              "exec": [
                "if(response.status === 400){",
                "  environment.isFailed = true",
                "}",
                "environment.settlementData = response.body",
                "environment.settlementId = response.body.id;",
                "if (response.body.errorInformation?.errorCode === \"3100\"){",
                "  ",
                "  environment.WINDOWISEMPTY = true;",
                "  console.log(\"Window is empty\");",
                "}else{",
                "  environment.WINDOWISEMPTY = false;",
                "}"
              ]
            }
          }
        },
        {
          "id": 2,
          "meta": {
            "info": "Prepare Settlement"
          },
          "description": "Prepare Settlement",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.settlementId}",
          "method": "put",
          "params": {
            "id": "{$environment.settlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "body": {
            "participants": []
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code status is 200",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.status).to.equal(200)",
                  "}"
                ]
              },
              {
                "id": 2,
                "description": "Overall state is PS_TRANSFERS_RECORDED",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.state).to.equal('PS_TRANSFERS_RECORDED')",
                  "}"
                ]
              },
              {
                "id": 3,
                "description": "Settlement Window state is PENDING_SETTLEMENT",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.settlementWindows[0].state).to.equal('PENDING_SETTLEMENT')",
                  "}"
                ]
              },
              {
                "id": 4,
                "description": "Participants state is PS_TRANSFERS_RECORDED",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "  response.body.participants.forEach(participant => {",
                  "      participant.accounts.forEach(account => {",
                  "          expect(account.state).to.equal('PS_TRANSFERS_RECORDED')",
                  "      });",
                  "  });",
                  "}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "delay": "2500",
          "scripts": {
            "preRequest": {
              "exec": [
                "if(environment.isFailed === true) {",
                "   custom.skipRequest();",
                " }",
                "",
                "var res = environment.settlementData;",
                "console.log('settlementId:',environment.settlementId);",
                "var i=0;",
                "var dfspsacc = [];",
                "var callbackpayer;",
                "",
                "environment.winstate = res.state;",
                "if(environment.winstate===\"PENDING_SETTLEMENT\"){",
                "",
                "res.participants.map(function (participant) {",
                "   participant.accounts.filter(account => account.netSettlementAmount.currency === environment.currency).forEach(curAccount => {",
                "",
                " dfspsacc[i] = {",
                "        dfspid: participant.id,",
                "        dfspaccid: curAccount.id ",
                "    }",
                "    i++;",
                "})",
                " })",
                "    ",
                "",
                "var participants = []",
                "for(let dfspsaccx of dfspsacc){",
                "  console.log('dfspid: ', dfspsaccx.dfspid)",
                "  console.log('dfspaccid: ',dfspsaccx.dfspaccid)",
                "  let participant = { ",
                "    id: dfspsaccx.dfspid,",
                "    accounts: [",
                "        {",
                "          id: dfspsaccx.dfspaccid,",
                "          reason: \"Transfers recorded for payer\",",
                "          state: \"PS_TRANSFERS_RECORDED\"",
                "        }",
                "      ]",
                "  };",
                "  participants.push(participant);",
                "}",
                "console.log('participants:',participants);",
                "",
                "custom.appendRequestBody({",
                "  participants: participants",
                "})",
                "",
                "}else{",
                "  console.log(\"Window is empty\")",
                "}"
              ]
            },
            "postRequest": {
              "exec": [
                "environment.preparedData = response.body;"
              ]
            }
          }
        },
        {
          "id": 3,
          "meta": {
            "info": "Reserve Settlement"
          },
          "description": "Reserve Settlement",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.settlementId}",
          "method": "put",
          "params": {
            "id": "{$environment.settlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "body": {
            "participants": []
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code status is 200",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.status).to.equal(200)",
                  "}"
                ]
              },
              {
                "id": 2,
                "description": "Overall state is PS_TRANSFERS_RESERVED",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.state).to.equal('PS_TRANSFERS_RESERVED')",
                  "}"
                ]
              },
              {
                "id": 3,
                "description": "Settlement Window state is PENDING_SETTLEMENT",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.settlementWindows[0].state).to.equal('PENDING_SETTLEMENT')",
                  "}"
                ]
              },
              {
                "id": 4,
                "description": "Participants state is PS_TRANSFERS_RESERVED",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "  response.body.participants.forEach(participant => {",
                  "      participant.accounts.forEach(account => {",
                  "          expect(account.state).to.equal('PS_TRANSFERS_RESERVED')",
                  "      });",
                  "  });",
                  "}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                "if(environment.isFailed === true) {",
                "   custom.skipRequest();",
                " }",
                "",
                "var res = environment.preparedData;",
                "console.log('settlementId:',environment.settlementId);",
                "var i=0;",
                "var dfspsacc = [];",
                "var callbackpayer;",
                "",
                "environment.winstate = res.state;",
                "if(environment.winstate===\"PS_TRANSFERS_RECORDED\"){",
                "",
                "res.participants.map(function (participant) {",
                "   participant.accounts.filter(account => account.netSettlementAmount.currency === environment.currency).forEach(curAccount => {",
                "",
                " dfspsacc[i] = {",
                "        dfspid: participant.id,",
                "        dfspaccid: curAccount.id ",
                "    }",
                "    i++;",
                "})",
                " })",
                "    ",
                "",
                "var participants = []",
                "for(let dfspsaccx of dfspsacc){",
                "  console.log('dfspid: ', dfspsaccx.dfspid)",
                "  console.log('dfspaccid: ',dfspsaccx.dfspaccid)",
                "  let participant = { ",
                "    id: dfspsaccx.dfspid,",
                "    accounts: [",
                "        {",
                "          id: dfspsaccx.dfspaccid,",
                "          reason: \"Transfers reserved for payer\",",
                "          state: \"PS_TRANSFERS_RESERVED\"",
                "        }",
                "      ]",
                "  };",
                "  participants.push(participant);",
                "}",
                "console.log('participants:',participants);",
                "",
                "custom.appendRequestBody({",
                "  participants: participants",
                "})",
                "",
                "}else{",
                "  console.log(\"Window is empty\")",
                "}"
              ]
            },
            "postRequest": {
              "exec": [
                "environment.reservedData = response.body;"
              ]
            }
          }
        },
        {
          "id": 4,
          "meta": {
            "info": "Commit Settlement"
          },
          "description": "Commit Settlement",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.settlementId}",
          "method": "put",
          "params": {
            "id": "{$environment.settlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "body": {
            "participants": []
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code status is 200",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.status).to.equal(200)",
                  "}"
                ]
              },
              {
                "id": 2,
                "description": "Overall state is PS_TRANSFERS_COMMITTED",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.state).to.equal('PS_TRANSFERS_COMMITTED')",
                  "}"
                ]
              },
              {
                "id": 3,
                "description": "Settlement Window state is PENDING_SETTLEMENT",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.settlementWindows[0].state).to.equal('PENDING_SETTLEMENT')",
                  "}"
                ]
              },
              {
                "id": 4,
                "description": "Participants state is PS_TRANSFERS_COMMITTED",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "  response.body.participants.forEach(participant => {",
                  "      participant.accounts.forEach(account => {",
                  "          expect(account.state).to.equal('PS_TRANSFERS_COMMITTED')",
                  "      });",
                  "  });",
                  "}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                "if(environment.isFailed === true) {",
                "   custom.skipRequest();",
                " }",
                "",
                "var res = environment.reservedData;",
                "console.log('settlementId:',environment.settlementId);",
                "var i=0;",
                "var dfspsacc = [];",
                "var callbackpayer;",
                "",
                "environment.winstate = res.state;",
                "if(environment.winstate===\"PS_TRANSFERS_RESERVED\"){",
                "",
                "res.participants.map(function (participant) {",
                "   participant.accounts.filter(account => account.netSettlementAmount.currency === environment.currency).forEach(curAccount => {",
                "",
                " dfspsacc[i] = {",
                "        dfspid: participant.id,",
                "        dfspaccid: curAccount.id ",
                "    }",
                "    i++;",
                "})",
                " })",
                "    ",
                "",
                "var participants = []",
                "for(let dfspsaccx of dfspsacc){",
                "  console.log('dfspid: ', dfspsaccx.dfspid)",
                "  console.log('dfspaccid: ',dfspsaccx.dfspaccid)",
                "  let participant = { ",
                "    id: dfspsaccx.dfspid,",
                "    accounts: [",
                "        {",
                "          id: dfspsaccx.dfspaccid,",
                "          reason: \"Transfers committed for payer\",",
                "          state: \"PS_TRANSFERS_COMMITTED\"",
                "        }",
                "      ]",
                "  };",
                "  participants.push(participant);",
                "}",
                "console.log('participants:',participants);",
                "",
                "custom.appendRequestBody({",
                "  participants: participants",
                "})",
                "",
                "}else{",
                "  console.log(\"Window is empty\")",
                "}"
              ]
            },
            "postRequest": {
              "exec": [
                "environment.committedData = response.body;"
              ]
            }
          }
        },
        {
          "id": 5,
          "meta": {
            "info": "Settle Settlement"
          },
          "description": "Settle Settlement",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.settlementId}",
          "method": "put",
          "params": {
            "id": "{$environment.settlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "body": {
            "participants": []
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code status is 200",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.status).to.equal(200)",
                  "}"
                ]
              },
              {
                "id": 2,
                "description": "Overall state is SETTLED",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.state).to.equal('SETTLED')",
                  "}"
                ]
              },
              {
                "id": 3,
                "description": "Settlement Window state is SETTLED",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.settlementWindows[0].state).to.equal('SETTLED')",
                  "}"
                ]
              },
              {
                "id": 4,
                "description": "Participants state is SETTLED",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "  response.body.participants.forEach(participant => {",
                  "      participant.accounts.forEach(account => {",
                  "          expect(account.state).to.equal('SETTLED')",
                  "      });",
                  "  });",
                  "}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                "if(environment.isFailed === true) {",
                "   custom.skipRequest();",
                " }",
                "",
                "var res = environment.committedData;",
                "console.log('settlementId:',environment.settlementId);",
                "var i=0;",
                "var dfspsacc = [];",
                "var callbackpayer;",
                "",
                "environment.winstate = res.state;",
                "if(environment.winstate===\"PS_TRANSFERS_COMMITTED\"){",
                "",
                "res.participants.map(function (participant) {",
                "   participant.accounts.filter(account => account.netSettlementAmount.currency === environment.currency).forEach(curAccount => {",
                "",
                " dfspsacc[i] = {",
                "        dfspid: participant.id,",
                "        dfspaccid: curAccount.id ",
                "    }",
                "    i++;",
                "})",
                " })",
                "    ",
                "",
                "var participants = []",
                "for(let dfspsaccx of dfspsacc){",
                "  console.log('dfspid: ', dfspsaccx.dfspid)",
                "  console.log('dfspaccid: ',dfspsaccx.dfspaccid)",
                "  let participant = { ",
                "    id: dfspsaccx.dfspid,",
                "    accounts: [",
                "        {",
                "          id: dfspsaccx.dfspaccid,",
                "          reason: \"Transfers settled for payer\",",
                "          state: \"SETTLED\"",
                "        }",
                "      ]",
                "  };",
                "  participants.push(participant);",
                "}",
                "console.log('participants:',participants);",
                "",
                "custom.appendRequestBody({",
                "  participants: participants",
                "})",
                "",
                "}else{",
                "  console.log(\"Window is empty\")",
                "}"
              ]
            }
          }
        }
      ]
    },
    {
      "id": 3,
      "name": "Run default deferred settlement model for all the closed windows",
      "meta": {
        "info": "Run default deferred settlement model for all the closed windows"
      },
      "fileInfo": {
        "path": "run-settlements.json"
      },
      "requests": [
        {
          "id": 1,
          "meta": {
            "info": "Create Settlement for Closed Window in default deferred settlement model "
          },
          "description": "Create Settlement for Closed Window in default deferred settlement model ",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements",
          "path": "/settlements",
          "method": "post",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.status).to.equal(200)",
                  "}"
                ]
              },
              {
                "id": 2,
                "description": "Settlement State should be PENDING_SETTLEMENT",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(environment.winstate).to.equal(\"PENDING_SETTLEMENT\")",
                  "}"
                ]
              },
              {
                "id": 3,
                "description": "Number of associated windows should be 1",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.settlementWindows.length).to.equal(1)",
                  "}"
                ]
              },
              {
                "id": 4,
                "description": "Associated Settlement Window ID is the correct one",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.settlementWindows[0].id).to.equal(environment.closedWindowID)",
                  "}"
                ]
              },
              {
                "id": 5,
                "description": "Associated Settlement Window state should be PENDING_SETTLEMENT",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.settlementWindows[0].state).to.equal(\"PENDING_SETTLEMENT\")",
                  "}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "body": {
            "settlementModel": "{$environment.settlementModels.deferred.default}",
            "reason": "TESTING",
            "settlementWindows": []
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "var settlementWindows = [];",
                "environment.closedWindowsData.forEach(closedWindow => {",
                "  let windowData = {",
                "    id: closedWindow.settlementWindowId",
                "  };",
                "  settlementWindows.push(windowData);",
                "});",
                "",
                "custom.appendRequestBody({",
                "  settlementWindows: settlementWindows",
                "});"
              ]
            },
            "postRequest": {
              "exec": [
                "if(response.status === 400){",
                " environment.isFailed = true; ",
                "}",
                "",
                "environment.settlementData = response.body",
                "environment.settlementId = response.body.id;",
                "if (response.body.errorInformation?.errorCode === \"3100\"){",
                "  ",
                "  environment.WINDOWISEMPTY = true;",
                "  console.log(\"Window is empty\");",
                "}else{",
                "  environment.WINDOWISEMPTY = false;",
                "}"
              ]
            }
          }
        },
        {
          "id": 2,
          "meta": {
            "info": "Prepare Settlement"
          },
          "description": "Prepare Settlement",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.settlementId}",
          "method": "put",
          "params": {
            "id": "{$environment.settlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "body": {
            "participants": []
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code status is 200",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.status).to.equal(200)",
                  "}"
                ]
              },
              {
                "id": 2,
                "description": "Overall state is PS_TRANSFERS_RECORDED",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.state).to.equal('PS_TRANSFERS_RECORDED')",
                  "}"
                ]
              },
              {
                "id": 3,
                "description": "Settlement Window state is PENDING_SETTLEMENT",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.settlementWindows[0].state).to.equal('PENDING_SETTLEMENT')",
                  "}"
                ]
              },
              {
                "id": 4,
                "description": "Participants state is PS_TRANSFERS_RECORDED",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "  response.body.participants.forEach(participant => {",
                  "      participant.accounts.forEach(account => {",
                  "          expect(account.state).to.equal('PS_TRANSFERS_RECORDED')",
                  "      });",
                  "  });",
                  "}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "delay": "2500",
          "scripts": {
            "preRequest": {
              "exec": [
                "if(environment.isFailed === true) {",
                "  custom.skipRequest(); ",
                "}",
                "",
                "var res = environment.settlementData;",
                "console.log('settlementId:',environment.settlementId);",
                "var i=0;",
                "var dfspsacc = [];",
                "var callbackpayer;",
                "",
                "environment.winstate = res.state;",
                "if(environment.winstate===\"PENDING_SETTLEMENT\"){",
                "",
                "res.participants.map(function (participant) {",
                "   participant.accounts.filter(account => account.netSettlementAmount.currency === environment.currency).forEach(curAccount => {",
                "",
                " dfspsacc[i] = {",
                "        dfspid: participant.id,",
                "        dfspaccid: curAccount.id ",
                "    }",
                "    i++;",
                "})",
                " })",
                "    ",
                "",
                "var participants = []",
                "for(let dfspsaccx of dfspsacc){",
                "  console.log('dfspid: ', dfspsaccx.dfspid)",
                "  console.log('dfspaccid: ',dfspsaccx.dfspaccid)",
                "  let participant = { ",
                "    id: dfspsaccx.dfspid,",
                "    accounts: [",
                "        {",
                "          id: dfspsaccx.dfspaccid,",
                "          reason: \"Transfers recorded for payer\",",
                "          state: \"PS_TRANSFERS_RECORDED\"",
                "        }",
                "      ]",
                "  };",
                "  participants.push(participant);",
                "}",
                "console.log('participants:',participants);",
                "",
                "custom.appendRequestBody({",
                "  participants: participants",
                "})",
                "",
                "}else{",
                "  console.log(\"Window is empty\")",
                "}"
              ]
            },
            "postRequest": {
              "exec": [
                "environment.preparedData = response.body;"
              ]
            }
          }
        },
        {
          "id": 3,
          "meta": {
            "info": "Reserve Settlement"
          },
          "description": "Reserve Settlement",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.settlementId}",
          "method": "put",
          "params": {
            "id": "{$environment.settlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "body": {
            "participants": []
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code status is 200",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.status).to.equal(200)",
                  "}"
                ]
              },
              {
                "id": 2,
                "description": "Overall state is PS_TRANSFERS_RESERVED",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.state).to.equal('PS_TRANSFERS_RESERVED')",
                  "}"
                ]
              },
              {
                "id": 3,
                "description": "Settlement Window state is PENDING_SETTLEMENT",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.settlementWindows[0].state).to.equal('PENDING_SETTLEMENT')",
                  "}"
                ]
              },
              {
                "id": 4,
                "description": "Participants state is PS_TRANSFERS_RESERVED",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "  response.body.participants.forEach(participant => {",
                  "      participant.accounts.forEach(account => {",
                  "          expect(account.state).to.equal('PS_TRANSFERS_RESERVED')",
                  "      });",
                  "  });",
                  "}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                "if(environment.isFailed === true) {",
                "  custom.skipRequest(); ",
                "}",
                "",
                "var res = environment.preparedData;",
                "console.log('settlementId:',environment.settlementId);",
                "var i=0;",
                "var dfspsacc = [];",
                "var callbackpayer;",
                "",
                "environment.winstate = res.state;",
                "if(environment.winstate===\"PS_TRANSFERS_RECORDED\"){",
                "",
                "res.participants.map(function (participant) {",
                "   participant.accounts.filter(account => account.netSettlementAmount.currency === environment.currency).forEach(curAccount => {",
                "",
                " dfspsacc[i] = {",
                "        dfspid: participant.id,",
                "        dfspaccid: curAccount.id ",
                "    }",
                "    i++;",
                "})",
                " })",
                "    ",
                "",
                "var participants = []",
                "for(let dfspsaccx of dfspsacc){",
                "  console.log('dfspid: ', dfspsaccx.dfspid)",
                "  console.log('dfspaccid: ',dfspsaccx.dfspaccid)",
                "  let participant = { ",
                "    id: dfspsaccx.dfspid,",
                "    accounts: [",
                "        {",
                "          id: dfspsaccx.dfspaccid,",
                "          reason: \"Transfers reserved for payer\",",
                "          state: \"PS_TRANSFERS_RESERVED\"",
                "        }",
                "      ]",
                "  };",
                "  participants.push(participant);",
                "}",
                "console.log('participants:',participants);",
                "",
                "custom.appendRequestBody({",
                "  participants: participants",
                "})",
                "",
                "}else{",
                "  console.log(\"Window is empty\")",
                "}"
              ]
            },
            "postRequest": {
              "exec": [
                "environment.reservedData = response.body;"
              ]
            }
          }
        },
        {
          "id": 4,
          "meta": {
            "info": "Commit Settlement"
          },
          "description": "Commit Settlement",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.settlementId}",
          "method": "put",
          "params": {
            "id": "{$environment.settlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "body": {
            "participants": []
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code status is 200",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.status).to.equal(200)",
                  "}"
                ]
              },
              {
                "id": 2,
                "description": "Overall state is PS_TRANSFERS_COMMITTED",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.state).to.equal('PS_TRANSFERS_COMMITTED')",
                  "}"
                ]
              },
              {
                "id": 3,
                "description": "Settlement Window state is PENDING_SETTLEMENT",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.settlementWindows[0].state).to.equal('PENDING_SETTLEMENT')",
                  "}"
                ]
              },
              {
                "id": 4,
                "description": "Participants state is PS_TRANSFERS_COMMITTED",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "  response.body.participants.forEach(participant => {",
                  "      participant.accounts.forEach(account => {",
                  "          expect(account.state).to.equal('PS_TRANSFERS_COMMITTED')",
                  "      });",
                  "  });",
                  "}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                "if(environment.isFailed === true) {",
                "  custom.skipRequest(); ",
                "}",
                "",
                "var res = environment.reservedData;",
                "console.log('settlementId:',environment.settlementId);",
                "var i=0;",
                "var dfspsacc = [];",
                "var callbackpayer;",
                "",
                "environment.winstate = res.state;",
                "if(environment.winstate===\"PS_TRANSFERS_RESERVED\"){",
                "",
                "res.participants.map(function (participant) {",
                "   participant.accounts.filter(account => account.netSettlementAmount.currency === environment.currency).forEach(curAccount => {",
                "",
                " dfspsacc[i] = {",
                "        dfspid: participant.id,",
                "        dfspaccid: curAccount.id ",
                "    }",
                "    i++;",
                "})",
                " })",
                "    ",
                "",
                "var participants = []",
                "for(let dfspsaccx of dfspsacc){",
                "  console.log('dfspid: ', dfspsaccx.dfspid)",
                "  console.log('dfspaccid: ',dfspsaccx.dfspaccid)",
                "  let participant = { ",
                "    id: dfspsaccx.dfspid,",
                "    accounts: [",
                "        {",
                "          id: dfspsaccx.dfspaccid,",
                "          reason: \"Transfers committed for payer\",",
                "          state: \"PS_TRANSFERS_COMMITTED\"",
                "        }",
                "      ]",
                "  };",
                "  participants.push(participant);",
                "}",
                "console.log('participants:',participants);",
                "",
                "custom.appendRequestBody({",
                "  participants: participants",
                "})",
                "",
                "}else{",
                "  console.log(\"Window is empty\")",
                "}"
              ]
            },
            "postRequest": {
              "exec": [
                "environment.committedData = response.body;"
              ]
            }
          }
        },
        {
          "id": 5,
          "meta": {
            "info": "Settle Settlement"
          },
          "description": "Settle Settlement",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.settlementId}",
          "method": "put",
          "params": {
            "id": "{$environment.settlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "body": {
            "participants": []
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code status is 200",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.status).to.equal(200)",
                  "}"
                ]
              },
              {
                "id": 2,
                "description": "Overall state is SETTLED",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.state).to.equal('SETTLED')",
                  "}"
                ]
              },
              {
                "id": 3,
                "description": "Settlement Window state is SETTLED",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.settlementWindows[0].state).to.equal('SETTLED')",
                  "}"
                ]
              },
              {
                "id": 4,
                "description": "Participants state is SETTLED",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "  response.body.participants.forEach(participant => {",
                  "      participant.accounts.forEach(account => {",
                  "          expect(account.state).to.equal('SETTLED')",
                  "      });",
                  "  });",
                  "}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                "if(environment.isFailed === true) {",
                "  custom.skipRequest(); ",
                "}",
                "",
                "var res = environment.committedData;",
                "console.log('settlementId:',environment.settlementId);",
                "var i=0;",
                "var dfspsacc = [];",
                "var callbackpayer;",
                "",
                "environment.winstate = res.state;",
                "if(environment.winstate===\"PS_TRANSFERS_COMMITTED\"){",
                "",
                "res.participants.map(function (participant) {",
                "   participant.accounts.filter(account => account.netSettlementAmount.currency === environment.currency).forEach(curAccount => {",
                "",
                " dfspsacc[i] = {",
                "        dfspid: participant.id,",
                "        dfspaccid: curAccount.id ",
                "    }",
                "    i++;",
                "})",
                " })",
                "    ",
                "",
                "var participants = []",
                "for(let dfspsaccx of dfspsacc){",
                "  console.log('dfspid: ', dfspsaccx.dfspid)",
                "  console.log('dfspaccid: ',dfspsaccx.dfspaccid)",
                "  let participant = { ",
                "    id: dfspsaccx.dfspid,",
                "    accounts: [",
                "        {",
                "          id: dfspsaccx.dfspaccid,",
                "          reason: \"Transfers settled for payer\",",
                "          state: \"SETTLED\"",
                "        }",
                "      ]",
                "  };",
                "  participants.push(participant);",
                "}",
                "console.log('participants:',participants);",
                "",
                "custom.appendRequestBody({",
                "  participants: participants",
                "})",
                "",
                "}else{",
                "  console.log(\"Window is empty\")",
                "}"
              ]
            }
          }
        }
      ]
    },
    {
      "id": 4,
      "name": "Run Interchange fee, cgs settlement model for all the closed windows",
      "meta": {
        "info": "Run Interchange fee, cgs settlement model for all the closed windows"
      },
      "fileInfo": {
        "path": "run-settlements.json"
      },
      "requests": [
        {
          "id": 1,
          "meta": {
            "info": "Create Settlement for Closed Window in Interchange fee, cgs settlement model "
          },
          "description": "Create Settlement for Closed Window in Interchange fee, cgs settlement model ",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements",
          "path": "/settlements",
          "method": "post",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.status).to.equal(200)",
                  "}"
                ]
              },
              {
                "id": 2,
                "description": "Settlement State should be PENDING_SETTLEMENT",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(environment.winstate).to.equal(\"PENDING_SETTLEMENT\")",
                  "}"
                ]
              },
              {
                "id": 3,
                "description": "Number of associated windows should be 1",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.settlementWindows.length).to.equal(1)",
                  "}"
                ]
              },
              {
                "id": 4,
                "description": "Associated Settlement Window ID is the correct one",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.settlementWindows[0].id).to.equal(environment.closedWindowID)",
                  "}"
                ]
              },
              {
                "id": 5,
                "description": "Associated Settlement Window state should be PENDING_SETTLEMENT",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.settlementWindows[0].state).to.equal(\"PENDING_SETTLEMENT\")",
                  "}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "body": {
            "settlementModel": "InterchangeFee",
            "reason": "TESTING",
            "settlementWindows": []
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "var settlementWindows = [];",
                "environment.closedWindowsData.forEach(closedWindow => {",
                "  let windowData = {",
                "    id: closedWindow.settlementWindowId",
                "  };",
                "  settlementWindows.push(windowData);",
                "});",
                "",
                "custom.appendRequestBody({",
                "  settlementWindows: settlementWindows",
                "});"
              ]
            },
            "postRequest": {
              "exec": [
                "environment.settlementData = response.body",
                "environment.settlementId = response.body.id;",
                "if (response.body.errorInformation?.errorCode === \"3100\"){",
                "  ",
                "  environment.WINDOWISEMPTY = true;",
                "  console.log(\"Window is empty\");",
                "}else{",
                "  environment.WINDOWISEMPTY = false;",
                "}"
              ]
            }
          }
        }
      ]
    },
    {
      "id": 5,
      "name": "Deposit Funds into Settlement Account (Funds-In)",
      "fileInfo": {
        "path": "run-settlements.json"
      },
      "requests": [
        {
          "id": 1,
          "meta": {
            "info": "testfsp1/accounts (settlement, position, interchange) BEFORE Funds-In transfer"
          },
          "description": "testfsp1/accounts (settlement, position, interchange) BEFORE Funds-In transfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM1_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM1_NAME}",
            "id": ""
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "disabled": false,
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "",
                "   res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "    ",
                "  if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "  environment.testfsp1SettlementBalanceBefore= curAccount.value",
                "  environment.testfsp1SettlementAccountId = curAccount.id",
                "        }",
                "        ",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "  environment.testfsp1PositionBalanceBefore= curAccount.value",
                "  environment.testfsp1PositionAccountId = curAccount.id",
                "        }  ",
                "        ",
                "          if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
                "  environment.testfsp1InterchFeeBalanceBefore= curAccount.value",
                "  environment.testfsp1InterchFeeAccountId = curAccount.id",
                "        }     ",
                "",
                "",
                "})",
                "//})",
                "",
                "                      ",
                "console.log(environment.testfsp1SettlementBalanceBefore);",
                "console.log(environment.testfsp1PositionBalanceBefore);",
                "console.log(environment.testfsp1InterchFeeBalanceBefore);",
                "console.log(environment.testfsp1SettlementAccountId);",
                "console.log(environment.testfsp1PositionAccountId);",
                "console.log(environment.testfsp1InterchFeeAccountId);"
              ]
            }
          }
        },
        {
          "id": 2,
          "meta": {
            "info": "testfsp2/accounts (settlement, position, interchange) BEFORE Funds-In transfer"
          },
          "description": "testfsp2/accounts (settlement, position, interchange) BEFORE Funds-In transfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM2_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM2_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "disabled": false,
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "",
                "   res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "    ",
                "  if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "  environment.testfsp2SettlementBalanceBefore= curAccount.value",
                "  environment.testfsp2SettlementAccountId = curAccount.id",
                "        }",
                "        ",
                "if(curAccount.ledgerAccountType === \"POSITION\") {",
                "  environment.testfsp2PositionBalanceBefore= curAccount.value",
                "  environment.testfsp2PositionAccountId = curAccount.id",
                "        }",
                "  if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
                "  environment.testfsp2InterchFeeBalanceBefore= curAccount.value",
                "  environment.testfsp2InterchFeeAccountId = curAccount.id",
                "        }",
                "",
                "})",
                "//})",
                "",
                "                      ",
                "console.log(environment.testfsp2SettlementBalanceBefore);",
                "console.log(environment.testfsp2PositionBalanceBefore);",
                "console.log(environment.testfsp2InterchFeeBalanceBefore);",
                "console.log(environment.testfsp2SettlementAccountId);",
                "console.log(environment.testfsp2PositionAccountId);",
                "console.log(environment.testfsp2InterchFeeAccountId);"
              ]
            }
          }
        },
        {
          "id": 3,
          "meta": {
            "info": "testfsp3/accounts (settlement, position, interchange) BEFORE Funds-In transfer"
          },
          "description": "testfsp3/accounts (settlement, position, interchange) BEFORE Funds-In transfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM3_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM3_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "disabled": false,
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "",
                "   res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "    ",
                "  if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "  environment.testfsp3SettlementBalanceBefore= curAccount.value",
                "  environment.testfsp3SettlementAccountId = curAccount.id",
                "        }",
                "        ",
                "if(curAccount.ledgerAccountType === \"POSITION\") {",
                "  environment.testfsp3PositionBalanceBefore= curAccount.value",
                "  environment.testfsp3PositionAccountId = curAccount.id",
                "        }",
                "",
                "  if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
                "  environment.testfsp3InterchFeeBalanceBefore= curAccount.value",
                "  environment.testfsp3InterchFeeAccountId = curAccount.id",
                "        }  ",
                "",
                "})",
                "//})",
                "",
                "                      ",
                "console.log(environment.testfsp3SettlementBalanceBefore);",
                "console.log(environment.testfsp3PositionBalanceBefore);",
                "console.log(environment.testfsp3InterchFeeBalanceBefore);",
                "console.log(environment.testfsp3SettlementAccountId);",
                "console.log(environment.testfsp3PositionAccountId);",
                "console.log(environment.testfsp3InterchFeeAccountId);"
              ]
            }
          }
        },
        {
          "id": 4,
          "meta": {
            "info": "testfsp4/accounts (settlement, position, interchange) BEFORE Funds-In transfer"
          },
          "description": "testfsp4/accounts (settlement, position, interchange) BEFORE Funds-In transfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM4_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM4_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "disabled": false,
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "",
                "   res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "    ",
                "  if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "  environment.testfsp4SettlementBalanceBefore= curAccount.value",
                "  environment.testfsp4SettlementAccountId = curAccount.id",
                "        }",
                "        ",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "  environment.testfsp4PositionBalanceBefore= curAccount.value",
                "  environment.testfsp4PositionAccountId = curAccount.id",
                "        }     ",
                " if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
                "  environment.testfsp4InterchFeeBalanceBefore= curAccount.value",
                "  environment.testfsp4InterchFeeAccountId = curAccount.id",
                "        }  ",
                "",
                "})",
                "//})",
                "",
                "                      ",
                "console.log(environment.testfsp4SettlementBalanceBefore);",
                "console.log(environment.testfsp4PositionBalanceBefore);",
                "console.log(environment.testfsp4InterchFeeBalanceBefore);",
                "console.log(environment.testfsp4SettlementAccountId);",
                "console.log(environment.testfsp4PositionAccountId);",
                "console.log(environment.testfsp4InterchFeeAccountId);"
              ]
            }
          }
        },
        {
          "id": 5,
          "meta": {
            "info": "Deposit Funds in Settlement Account - payerfsp"
          },
          "description": "Deposit Funds in Settlement Account - testfsp1",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts/{id}",
          "path": "/participants/{$inputs.SIM1_NAME}/accounts/{$environment.testfsp1SettlementAccountId}",
          "method": "post",
          "params": {
            "name": "{$inputs.SIM1_NAME}",
            "id": "{$environment.testfsp1SettlementAccountId}"
          },
          "body": {
            "transferId": "{$function.generic.generateUUID}",
            "externalReference": "string",
            "action": "recordFundsIn",
            "reason": "string",
            "amount": {
              "amount": "{$requestVariables.payerfspfundsInPrepareAmount}",
              "currency": "{$inputs.cgscurrency}"
            }
          },
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.SIM1_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "disabled": false,
          "scripts": {
            "preRequest": {
              "exec": [
                "environment.SETTLEMENT_CGS_FUNDSIN_TESTFSP1 = environment.SETTLEMENT_CGS_FUNDSIN_TESTFSP1 || 2000;",
                "requestVariables.payerfspfundsInPrepareAmount = Number(environment.SETTLEMENT_CGS_FUNDSIN_TESTFSP1);",
                ""
              ]
            }
          }
        },
        {
          "id": 6,
          "meta": {
            "info": "Deposit Funds in Settlement Account - payerfsp"
          },
          "description": "Deposit Funds in Settlement Account - testfsp2",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts/{id}",
          "path": "/participants/{$inputs.SIM2_NAME}/accounts/{$environment.testfsp2SettlementAccountId}",
          "method": "post",
          "params": {
            "name": "{$inputs.SIM2_NAME}",
            "id": "{$environment.testfsp2SettlementAccountId}"
          },
          "body": {
            "transferId": "{$function.generic.generateUUID}",
            "externalReference": "string",
            "action": "recordFundsIn",
            "reason": "string",
            "amount": {
              "amount": "{$requestVariables.payerfspfundsInPrepareAmount}",
              "currency": "{$inputs.cgscurrency}"
            }
          },
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.SIM2_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "disabled": false,
          "scripts": {
            "preRequest": {
              "exec": [
                "environment.SETTLEMENT_CGS_FUNDSIN_TESTFSP2 = environment.SETTLEMENT_CGS_FUNDSIN_TESTFSP2 || 2000;",
                "requestVariables.payerfspfundsInPrepareAmount = Number(environment.SETTLEMENT_CGS_FUNDSIN_TESTFSP2);",
                ""
              ]
            }
          }
        },
        {
          "id": 7,
          "meta": {
            "info": "Deposit Funds in Settlement Account - payerfsp"
          },
          "description": "Deposit Funds in Settlement Account - testfsp3",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts/{id}",
          "path": "/participants/{$inputs.SIM3_NAME}/accounts/{$environment.testfsp3SettlementAccountId}",
          "method": "post",
          "params": {
            "name": "{$inputs.SIM3_NAME}",
            "id": "{$environment.testfsp3SettlementAccountId}"
          },
          "body": {
            "transferId": "{$function.generic.generateUUID}",
            "externalReference": "string",
            "action": "recordFundsIn",
            "reason": "string",
            "amount": {
              "amount": "{$requestVariables.payerfspfundsInPrepareAmount}",
              "currency": "{$inputs.cgscurrency}"
            }
          },
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.SIM3_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "disabled": false,
          "scripts": {
            "preRequest": {
              "exec": [
                "environment.SETTLEMENT_CGS_FUNDSIN_TESTFSP3 = environment.SETTLEMENT_CGS_FUNDSIN_TESTFSP3 || 2000;",
                "requestVariables.payerfspfundsInPrepareAmount = Number(environment.SETTLEMENT_CGS_FUNDSIN_TESTFSP3);",
                ""
              ]
            }
          }
        },
        {
          "id": 8,
          "meta": {
            "info": "Deposit Funds in Settlement Account - payerfsp"
          },
          "description": "Deposit Funds in Settlement Account - testfsp4",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts/{id}",
          "path": "/participants/{$inputs.SIM4_NAME}/accounts/{$environment.testfsp4SettlementAccountId}",
          "method": "post",
          "params": {
            "name": "{$inputs.SIM4_NAME}",
            "id": "{$environment.testfsp4SettlementAccountId}"
          },
          "body": {
            "transferId": "{$function.generic.generateUUID}",
            "externalReference": "string",
            "action": "recordFundsIn",
            "reason": "string",
            "amount": {
              "amount": "{$requestVariables.payerfspfundsInPrepareAmount}",
              "currency": "{$inputs.cgscurrency}"
            }
          },
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.SIM4_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "disabled": false,
          "scripts": {
            "preRequest": {
              "exec": [
                "environment.SETTLEMENT_CGS_FUNDSIN_TESTFSP4 = environment.SETTLEMENT_CGS_FUNDSIN_TESTFSP4 || 2000;",
                "requestVariables.payerfspfundsInPrepareAmount = Number(environment.SETTLEMENT_CGS_FUNDSIN_TESTFSP4);"
              ]
            }
          }
        },
        {
          "id": 9,
          "meta": {
            "info": "testfsp1/accounts (settlement, position, interchange) AFTER Funds-In transfer"
          },
          "description": "testfsp1/accounts (settlement, position, interchange) AFTER Funds-In transfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM1_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM1_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Check that settlement account value changes by transfer amount ",
                "exec": [
                  "expect(environment.testfsp1SettlementBalanceAfterExpected).to.eql(environment.testfsp1SettlementBalanceAfterActual);"
                ]
              },
              {
                "id": 3,
                "description": "Check that position account value remains unchanged",
                "exec": [
                  "expect(requestVariables.testfsp1PositionBalanceBefore).to.eql(environment.testfsp1PositionBalanceAfter);"
                ]
              },
              {
                "id": 4,
                "description": "check that interchange fee have been changed by",
                "exec": [
                  "expect(Number(requestVariables.testfsp1InterchFeeBalanceBefore)).to.eql(Number(environment.testfsp1InterchFeeBalanceAfter));"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "delay": "{$inputs.DELAY_CGS}",
          "queryParams": {
            "": ""
          },
          "disabled": false,
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "// lets get retry configs",
                "const maxRetryCount = Number.parseFloat(environment.RETRY_MAX_ATTEMPTS) || 20;",
                "const maxRetryWait = Number.parseFloat(environment.RETRY_MAX_WAIT_IN_MS) || 250;",
                "",
                "const envSettlementRuleInterchangeFee = Number.parseFloat(environment.SETTLEMENT_RULE_INTERCHANGE_FEE) || 0.006;",
                "",
                "requestVariables.payerfspfundsInPrepareAmount = Number(environment.SETTLEMENT_CGS_FUNDSIN_TESTFSP1);",
                "",
                "// var maxRetryWait = 1;",
                "",
                "var res = response.body;",
                "",
                "for (let retryCount = 0 ; retryCount < maxRetryCount; retryCount++) {",
                "  console.log(`retry-count=${retryCount+1}, max-count=${maxRetryCount}, max-wait=${maxRetryWait}`);",
                "  // console.log(res);",
                "  res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "      ",
                "    if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "      environment.testfsp1SettlementBalanceAfter= curAccount.value",
                "    }",
                "",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "      environment.testfsp1PositionBalanceAfter= curAccount.value",
                "    }",
                "",
                "    if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
                "      environment.testfsp1InterchFeeBalanceAfter= curAccount.value",
                "    }",
                "  })",
                "",
                "  /*",
                "  console.log(environment.testfsp1SettlementBalanceAfterTransfer1);",
                "  console.log(environment.testfsp1PositionBalanceAfter);",
                "  console.log(environment.testfsp1InterchFeeBalanceAfter);*/",
                "",
                "  // TODO: Reference previous POST /Scenarios request (e.g. '{$prev.54.request.body.amount}') once https://github.com/mojaloop/project/issues/2890 (issue 6) has been resolved.",
                "  const transferAmount = requestVariables.payerfspfundsInPrepareAmount;",
                "",
                "  console.log(`transferAmount=${transferAmount}`)",
                "  ",
                "  environment.testfsp1SettlementBalanceAfterExpected = (Number.parseFloat(environment.testfsp1SettlementBalanceBefore) - Number.parseFloat(transferAmount)).toFixed(2);",
                "",
                "",
                "  console.log(`testfsp1SettlementBalanceAfterExpected=${environment.testfsp1SettlementBalanceAfterExpected}`)",
                "",
                "  environment.testfsp1SettlementBalanceAfterActual = Number.parseFloat(environment.testfsp1SettlementBalanceAfter).toFixed(2);",
                "",
                "  console.log(`testfsp1SettlementBalanceAfterActual=${environment.testfsp1SettlementBalanceAfterActual}`)",
                "",
                "  console.log(environment.testfsp1SettlementBalanceAfterActual === environment.testfsp1SettlementBalanceAfterExpected)",
                "",
                "  console.log('extracted testfsp1 settlement balance before transfers',environment.testfsp1SettlementBalanceBefore);",
                "  console.log('extracted testfsp1 settlement balance after first transfer ACTUAL',environment.testfsp1SettlementBalanceAfterActual);",
                "  console.log('calculated testfsp1 settlement balance before transfers '+environment.testfsp1SettlementBalanceBefore +' transfer amount -'+transferAmount, environment.testfsp1SettlementBalanceAfterExpected);",
                "",
                "  console.log('test fsp3 positions account before',environment.testfsp1PositionBalanceBefore);",
                "  console.log('test fsp3 positions account after',environment.testfsp1PositionBalanceAfter);",
                "",
                "  console.log(`environment.testfsp1InterchFeeBalanceAfter=${environment.testfsp1InterchFeeBalanceAfter}`)",
                "  console.log(`environment.testfsp1InterchFeeBalanceBefore=${environment.testfsp1InterchFeeBalanceBefore}`)",
                "",
                "  console.log(`environment.testfsp1PositionBalanceBefore (${environment.testfsp1PositionBalanceBefore}) == environment.testfsp1PositionBalanceAfter (${environment.testfsp1PositionBalanceAfter})`)",
                "  console.log(`environment.testfsp1SettlementBalanceAfterExpected (${environment.testfsp1SettlementBalanceAfterExpected}) == environment.testfsp1SettlementBalanceAfterActual (${environment.testfsp1SettlementBalanceAfterActual})`)",
                "  console.log(`environment.testfsp1InterchFeeBalanceBefore (${environment.testfsp1InterchFeeBalanceBefore}) == environment.testfsp1InterchFeeBalanceAfter (${environment.testfsp1InterchFeeBalanceAfter})`)",
                "",
                "  if ((environment.testfsp1PositionBalanceBefore == environment.testfsp1PositionBalanceAfter) &&",
                "  (environment.testfsp1SettlementBalanceAfterExpected == environment.testfsp1SettlementBalanceAfterActual) &&",
                "  (environment.testfsp1InterchFeeBalanceBefore == environment.testfsp1InterchFeeBalanceAfter)) {",
                "    console.log('Everything is ok, lets continue')",
                "    break; // lets break out of while loop",
                "  } else {",
                "    console.log(`Everything is NOT OK, lets wait for ${maxRetryWait}ms, and try again...`)",
                "    await custom.sleep(maxRetryWait);",
                "    const axioResponse = await axios.get(`${environment.HOST_CENTRAL_LEDGER}/participants/${environment.SIM1_NAME}/accounts`)",
                "    res = axioResponse.data;",
                "  }",
                "}",
                "",
                "// Store *BalanceBefore in a local variable for assertion test",
                "requestVariables.testfsp1PositionBalanceBefore = environment.testfsp1PositionBalanceBefore",
                "requestVariables.testfsp1InterchFeeBalanceBefore = environment.testfsp1InterchFeeBalanceBefore",
                "",
                "// Reset *Balances for later tests",
                "environment.testfsp1PositionBalanceBefore = environment.testfsp1PositionBalanceAfter",
                "environment.testfsp1SettlementBalanceBefore = environment.testfsp1SettlementBalanceAfter",
                "environment.testfsp1InterchFeeBalanceBefore = environment.testfsp1InterchFeeBalanceAfter",
                "",
                "console.log(`RESET - environment.testfsp1PositionBalanceBefore=${environment.testfsp1PositionBalanceBefore}`)",
                "console.log(`RESET - environment.testfsp1SettlementBalanceBefore=${environment.testfsp1SettlementBalanceBefore}`)",
                "console.log(`RESET - environment.testfsp1InterchFeeBalanceBefore=${environment.testfsp1InterchFeeBalanceBefore}`)",
                ""
              ]
            }
          }
        },
        {
          "id": 10,
          "description": "testfsp2/accounts (settlement, position, interchange) AFTER Funds-In transfer",
          "meta": {
            "info": "testfsp2/accounts (settlement, position, interchange) AFTER Funds-In transfer"
          },
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM2_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM2_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Check that settlement account value changes by transfer amount ",
                "exec": [
                  "expect(environment.testfsp2SettlementBalanceAfterExpected).to.eql(environment.testfsp2SettlementBalanceAfterActual);"
                ]
              },
              {
                "id": 3,
                "description": "Check that position account value remains unchanged",
                "exec": [
                  "expect(requestVariables.testfsp2PositionBalanceBefore).to.eql(environment.testfsp2PositionBalanceAfter);"
                ]
              },
              {
                "id": 4,
                "description": "check that interchange fee have been changed by",
                "exec": [
                  "expect(Number(requestVariables.testfsp2InterchFeeBalanceBefore)).to.eql(Number(environment.testfsp2InterchFeeBalanceAfter));"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "delay": "{$inputs.DELAY_CGS}",
          "queryParams": {
            "": ""
          },
          "disabled": false,
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "// lets get retry configs",
                "const maxRetryCount = Number.parseFloat(environment.RETRY_MAX_ATTEMPTS) || 20;",
                "const maxRetryWait = Number.parseFloat(environment.RETRY_MAX_WAIT_IN_MS) || 250;",
                "",
                "requestVariables.payerfspfundsInPrepareAmount = Number(environment.SETTLEMENT_CGS_FUNDSIN_TESTFSP2);",
                "",
                "// var maxRetryWait = 1;",
                "",
                "var res = response.body;",
                "",
                "for (let retryCount = 0 ; retryCount < maxRetryCount; retryCount++) {",
                "  console.log(`retry-count=${retryCount+1}, max-count=${maxRetryCount}, max-wait=${maxRetryWait}`);",
                "  // console.log(res);",
                "  res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "      ",
                "    if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "      environment.testfsp2SettlementBalanceAfter= curAccount.value",
                "    }",
                "",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "      environment.testfsp2PositionBalanceAfter= curAccount.value",
                "    }",
                "",
                "    if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
                "      environment.testfsp2InterchFeeBalanceAfter= curAccount.value",
                "    }",
                "  })",
                "",
                "  /*",
                "  console.log(environment.testfsp2SettlementBalanceAfterTransfer1);",
                "  console.log(environment.testfsp2PositionBalanceAfter);",
                "  console.log(environment.testfsp2InterchFeeBalanceAfter);*/",
                "",
                "  // TODO: Reference previous POST /Scenarios request (e.g. '{$prev.54.request.body.amount}') once https://github.com/mojaloop/project/issues/2890 (issue 6) has been resolved.",
                "  const transferAmount = requestVariables.payerfspfundsInPrepareAmount;",
                "",
                "  console.log(`transferAmount=${transferAmount}`)",
                "",
                "  console.log(`testfsp2SettlementBalanceBefore=${environment.testfsp2SettlementBalanceBefore}`)",
                "  ",
                "  environment.testfsp2SettlementBalanceAfterExpected = (Number.parseFloat(environment.testfsp2SettlementBalanceBefore) - Number.parseFloat(transferAmount)).toFixed(2);",
                "",
                "",
                "  console.log(`testfsp2SettlementBalanceAfterExpected=${environment.testfsp2SettlementBalanceAfterExpected}`)",
                "",
                "  environment.testfsp2SettlementBalanceAfterActual = Number.parseFloat(environment.testfsp2SettlementBalanceAfter).toFixed(2);",
                "",
                "  console.log(`testfsp2SettlementBalanceAfterActual=${environment.testfsp2SettlementBalanceAfterActual}`)",
                "",
                "  console.log(environment.testfsp2SettlementBalanceAfterActual === environment.testfsp2SettlementBalanceAfterExpected)",
                "",
                "  console.log('extracted testfsp2 settlement balance before transfers',environment.testfsp2SettlementBalanceBefore);",
                "  console.log('extracted testfsp2 settlement balance after first transfer ACTUAL',environment.testfsp2SettlementBalanceAfterActual);",
                "  console.log('calculated testfsp2 settlement balance before transfers '+environment.testfsp2SettlementBalanceBefore +' transfer amount -'+transferAmount, environment.testfsp2SettlementBalanceAfterExpected);",
                "",
                "  console.log('test fsp3 positions account before',environment.testfsp2PositionBalanceBefore);",
                "  console.log('test fsp3 positions account after',environment.testfsp2PositionBalanceAfter);",
                "",
                "  console.log(`environment.testfsp2InterchFeeBalanceAfter=${environment.testfsp2InterchFeeBalanceAfter}`)",
                "  console.log(`environment.testfsp2InterchFeeBalanceBefore=${environment.testfsp2InterchFeeBalanceBefore}`)",
                "",
                "  console.log(`environment.testfsp2PositionBalanceBefore (${environment.testfsp2PositionBalanceBefore}) == environment.testfsp2PositionBalanceAfter (${environment.testfsp2PositionBalanceAfter})`)",
                "  console.log(`environment.testfsp2SettlementBalanceAfterExpected (${environment.testfsp2SettlementBalanceAfterExpected}) == environment.testfsp2SettlementBalanceAfterActual (${environment.testfsp2SettlementBalanceAfterActual})`)",
                "  console.log(`environment.testfsp2InterchFeeBalanceBefore (${environment.testfsp2InterchFeeBalanceBefore}) == environment.testfsp2InterchFeeBalanceAfter (${environment.testfsp2InterchFeeBalanceAfter})`)",
                "",
                "  if ((environment.testfsp2PositionBalanceBefore == environment.testfsp2PositionBalanceAfter) &&",
                "  (environment.testfsp2SettlementBalanceAfterExpected == environment.testfsp2SettlementBalanceAfterActual) &&",
                "  (environment.testfsp2InterchFeeBalanceBefore == environment.testfsp2InterchFeeBalanceAfter)) {",
                "    console.log('Everything is ok, lets continue')",
                "    break; // lets break out of while loop",
                "  } else {",
                "    console.log(`Everything is NOT OK, lets wait for ${maxRetryWait}ms, and try again...`)",
                "    await custom.sleep(maxRetryWait);",
                "    const axioResponse = await axios.get(`${environment.HOST_CENTRAL_LEDGER}/participants/${environment.SIM2_NAME}/accounts`)",
                "    res = axioResponse.data;",
                "  }",
                "}",
                "",
                "// Store *BalanceBefore in a local variable for assertion test",
                "requestVariables.testfsp2PositionBalanceBefore = environment.testfsp2PositionBalanceBefore",
                "requestVariables.testfsp2InterchFeeBalanceBefore = environment.testfsp2InterchFeeBalanceBefore",
                "",
                "// Reset *Balances for later tests",
                "environment.testfsp2PositionBalanceBefore = environment.testfsp2PositionBalanceAfter",
                "environment.testfsp2SettlementBalanceBefore = environment.testfsp2SettlementBalanceAfter",
                "environment.testfsp2InterchFeeBalanceBefore = environment.testfsp2InterchFeeBalanceAfter",
                "",
                "console.log(`RESET - environment.testfsp2PositionBalanceBefore=${environment.testfsp2PositionBalanceBefore}`)",
                "console.log(`RESET - environment.testfsp2SettlementBalanceBefore=${environment.testfsp2SettlementBalanceBefore}`)",
                "console.log(`RESET - environment.testfsp2InterchFeeBalanceBefore=${environment.testfsp2InterchFeeBalanceBefore}`)",
                ""
              ]
            }
          }
        },
        {
          "id": 11,
          "description": "testfsp3/accounts (settlement, position, interchange) AFTER Funds-In transfer",
          "meta": {
            "info": "testfsp3/accounts (settlement, position, interchange) AFTER Funds-In transfer"
          },
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM3_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM3_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Check that settlement account value changes by transfer amount ",
                "exec": [
                  "expect(environment.testfsp3SettlementBalanceAfterExpected).to.eql(environment.testfsp3SettlementBalanceAfterActual);"
                ]
              },
              {
                "id": 3,
                "description": "Check that position account value remains unchanged",
                "exec": [
                  "expect(requestVariables.testfsp3PositionBalanceBefore).to.eql(environment.testfsp3PositionBalanceAfter);"
                ]
              },
              {
                "id": 4,
                "description": "check that interchange fee have been changed by",
                "exec": [
                  "expect(Number(requestVariables.testfsp3InterchFeeBalanceBefore)).to.eql(Number(environment.testfsp3InterchFeeBalanceAfter));"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "delay": "{$inputs.DELAY_CGS}",
          "queryParams": {
            "": ""
          },
          "disabled": false,
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "// lets get retry configs",
                "const maxRetryCount = Number.parseFloat(environment.RETRY_MAX_ATTEMPTS) || 20;",
                "const maxRetryWait = Number.parseFloat(environment.RETRY_MAX_WAIT_IN_MS) || 250;",
                "",
                "requestVariables.payerfspfundsInPrepareAmount = Number(environment.SETTLEMENT_CGS_FUNDSIN_TESTFSP3);",
                "",
                "// var maxRetryWait = 1;",
                "",
                "var res = response.body;",
                "",
                "for (let retryCount = 0 ; retryCount < maxRetryCount; retryCount++) {",
                "  console.log(`retry-count=${retryCount+1}, max-count=${maxRetryCount}, max-wait=${maxRetryWait}`);",
                "  // console.log(res);",
                "  res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "      ",
                "    if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "      environment.testfsp3SettlementBalanceAfter= curAccount.value",
                "    }",
                "",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "      environment.testfsp3PositionBalanceAfter= curAccount.value",
                "    }",
                "",
                "    if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
                "      environment.testfsp3InterchFeeBalanceAfter= curAccount.value",
                "    }",
                "  })",
                "",
                "  /*",
                "  console.log(environment.testfsp3SettlementBalanceAfterTransfer1);",
                "  console.log(environment.testfsp3PositionBalanceAfter);",
                "  console.log(environment.testfsp3InterchFeeBalanceAfter);*/",
                "",
                "  // TODO: Reference previous POST /Scenarios request (e.g. '{$prev.54.request.body.amount}') once https://github.com/mojaloop/project/issues/2890 (issue 6) has been resolved.",
                "  const transferAmount = requestVariables.payerfspfundsInPrepareAmount;",
                "",
                "  console.log(`transferAmount=${transferAmount}`)",
                "",
                "  console.log(`testfsp3SettlementBalanceBefore=${environment.testfsp3SettlementBalanceBefore}`)",
                "  ",
                "  environment.testfsp3SettlementBalanceAfterExpected = (Number.parseFloat(environment.testfsp3SettlementBalanceBefore) - Number.parseFloat(transferAmount)).toFixed(2);",
                "",
                "",
                "  console.log(`testfsp3SettlementBalanceAfterExpected=${environment.testfsp3SettlementBalanceAfterExpected}`)",
                "",
                "  environment.testfsp3SettlementBalanceAfterActual = Number.parseFloat(environment.testfsp3SettlementBalanceAfter).toFixed(2);",
                "",
                "  console.log(`testfsp3SettlementBalanceAfterActual=${environment.testfsp3SettlementBalanceAfterActual}`)",
                "",
                "  console.log(environment.testfsp3SettlementBalanceAfterActual === environment.testfsp3SettlementBalanceAfterExpected)",
                "",
                "  console.log('extracted testfsp3 settlement balance before transfers',environment.testfsp3SettlementBalanceBefore);",
                "  console.log('extracted testfsp3 settlement balance after first transfer ACTUAL',environment.testfsp3SettlementBalanceAfterActual);",
                "  console.log('calculated testfsp3 settlement balance before transfers '+environment.testfsp3SettlementBalanceBefore +' transfer amount -'+transferAmount, environment.testfsp3SettlementBalanceAfterExpected);",
                "",
                "  console.log('test fsp3 positions account before',environment.testfsp3PositionBalanceBefore);",
                "  console.log('test fsp3 positions account after',environment.testfsp3PositionBalanceAfter);",
                "",
                "  console.log(`environment.testfsp3InterchFeeBalanceAfter=${environment.testfsp3InterchFeeBalanceAfter}`)",
                "  console.log(`environment.testfsp3InterchFeeBalanceBefore=${environment.testfsp3InterchFeeBalanceBefore}`)",
                "",
                "  console.log(`environment.testfsp3PositionBalanceBefore (${environment.testfsp3PositionBalanceBefore}) == environment.testfsp3PositionBalanceAfter (${environment.testfsp3PositionBalanceAfter})`)",
                "  console.log(`environment.testfsp3SettlementBalanceAfterExpected (${environment.testfsp3SettlementBalanceAfterExpected}) == environment.testfsp3SettlementBalanceAfterActual (${environment.testfsp3SettlementBalanceAfterActual})`)",
                "  console.log(`environment.testfsp3InterchFeeBalanceBefore (${environment.testfsp3InterchFeeBalanceBefore}) == environment.testfsp3InterchFeeBalanceAfter (${environment.testfsp3InterchFeeBalanceAfter})`)",
                "",
                "  if ((environment.testfsp3PositionBalanceBefore == environment.testfsp3PositionBalanceAfter) &&",
                "  (environment.testfsp3SettlementBalanceAfterExpected == environment.testfsp3SettlementBalanceAfterActual) &&",
                "  (environment.testfsp3InterchFeeBalanceBefore == environment.testfsp3InterchFeeBalanceAfter)) {",
                "    console.log('Everything is ok, lets continue')",
                "    break; // lets break out of while loop",
                "  } else {",
                "    console.log(`Everything is NOT OK, lets wait for ${maxRetryWait}ms, and try again...`)",
                "    await custom.sleep(maxRetryWait);",
                "    const axioResponse = await axios.get(`${environment.HOST_CENTRAL_LEDGER}/participants/${environment.SIM3_NAME}/accounts`)",
                "    res = axioResponse.data;",
                "  }",
                "}",
                "",
                "// Store *BalanceBefore in a local variable for assertion test",
                "requestVariables.testfsp3PositionBalanceBefore = environment.testfsp3PositionBalanceBefore",
                "requestVariables.testfsp3InterchFeeBalanceBefore = environment.testfsp3InterchFeeBalanceBefore",
                "",
                "// Reset *Balances for later tests",
                "environment.testfsp3PositionBalanceBefore = environment.testfsp3PositionBalanceAfter",
                "environment.testfsp3SettlementBalanceBefore = environment.testfsp3SettlementBalanceAfter",
                "environment.testfsp3InterchFeeBalanceBefore = environment.testfsp3InterchFeeBalanceAfter",
                "",
                "console.log(`RESET - environment.testfsp3PositionBalanceBefore=${environment.testfsp3PositionBalanceBefore}`)",
                "console.log(`RESET - environment.testfsp3SettlementBalanceBefore=${environment.testfsp3SettlementBalanceBefore}`)",
                "console.log(`RESET - environment.testfsp3InterchFeeBalanceBefore=${environment.testfsp3InterchFeeBalanceBefore}`)",
                ""
              ]
            }
          }
        },
        {
          "id": 12,
          "description": "testfsp4/accounts (settlement, position, interchange) AFTER Funds-In transfer",
          "meta": {
            "info": "testfsp4/accounts (settlement, position, interchange) AFTER Funds-In transfer"
          },
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM4_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM4_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Check that settlement account value changes by transfer amount ",
                "exec": [
                  "expect(environment.testfsp4SettlementBalanceAfterExpected).to.eql(environment.testfsp4SettlementBalanceAfterActual);"
                ]
              },
              {
                "id": 3,
                "description": "Check that position account value remains unchanged",
                "exec": [
                  "expect(requestVariables.testfsp4PositionBalanceBefore).to.eql(environment.testfsp4PositionBalanceAfter);"
                ]
              },
              {
                "id": 4,
                "description": "check that interchange fee have been changed by",
                "exec": [
                  "expect(Number(requestVariables.testfsp4InterchFeeBalanceBefore)).to.eql(Number(environment.testfsp4InterchFeeBalanceAfter));"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "delay": "{$inputs.DELAY_CGS}",
          "queryParams": {
            "": ""
          },
          "disabled": false,
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "// lets get retry configs",
                "const maxRetryCount = Number.parseFloat(environment.RETRY_MAX_ATTEMPTS) || 20;",
                "const maxRetryWait = Number.parseFloat(environment.RETRY_MAX_WAIT_IN_MS) || 250;",
                "",
                "requestVariables.payerfspfundsInPrepareAmount = Number(environment.SETTLEMENT_CGS_FUNDSIN_TESTFSP4);",
                "",
                "// var maxRetryWait = 1;",
                "",
                "var res = response.body;",
                "",
                "for (let retryCount = 0 ; retryCount < maxRetryCount; retryCount++) {",
                "  console.log(`retry-count=${retryCount+1}, max-count=${maxRetryCount}, max-wait=${maxRetryWait}`);",
                "  // console.log(res);",
                "  res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "      ",
                "    if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "      environment.testfsp4SettlementBalanceAfter= curAccount.value",
                "    }",
                "",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "      environment.testfsp4PositionBalanceAfter= curAccount.value",
                "    }",
                "",
                "    if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
                "      environment.testfsp4InterchFeeBalanceAfter= curAccount.value",
                "    }",
                "  })",
                "",
                "  /*",
                "  console.log(environment.testfsp4SettlementBalanceAfterTransfer1);",
                "  console.log(environment.testfsp4PositionBalanceAfter);",
                "  console.log(environment.testfsp4InterchFeeBalanceAfter);*/",
                "",
                "  // TODO: Reference previous POST /Scenarios request (e.g. '{$prev.54.request.body.amount}') once https://github.com/mojaloop/project/issues/2890 (issue 6) has been resolved.",
                "  const transferAmount = requestVariables.payerfspfundsInPrepareAmount;",
                "",
                "  console.log(`transferAmount=${transferAmount}`)",
                "",
                "  console.log(`testfsp4SettlementBalanceBefore=${environment.testfsp4SettlementBalanceBefore}`)",
                "  ",
                "  environment.testfsp4SettlementBalanceAfterExpected = (Number.parseFloat(environment.testfsp4SettlementBalanceBefore) - Number.parseFloat(transferAmount)).toFixed(2);",
                "",
                "",
                "  console.log(`testfsp4SettlementBalanceAfterExpected=${environment.testfsp4SettlementBalanceAfterExpected}`)",
                "",
                "  environment.testfsp4SettlementBalanceAfterActual = Number.parseFloat(environment.testfsp4SettlementBalanceAfter).toFixed(2);",
                "",
                "  console.log(`testfsp4SettlementBalanceAfterActual=${environment.testfsp4SettlementBalanceAfterActual}`)",
                "",
                "  console.log(environment.testfsp4SettlementBalanceAfterActual === environment.testfsp4SettlementBalanceAfterExpected)",
                "",
                "  console.log('extracted testfsp4 settlement balance before transfers',environment.testfsp4SettlementBalanceBefore);",
                "  console.log('extracted testfsp4 settlement balance after first transfer ACTUAL',environment.testfsp4SettlementBalanceAfterActual);",
                "  console.log('calculated testfsp4 settlement balance before transfers '+environment.testfsp4SettlementBalanceBefore +' transfer amount -'+transferAmount, environment.testfsp4SettlementBalanceAfterExpected);",
                "",
                "  console.log('test fsp3 positions account before',environment.testfsp4PositionBalanceBefore);",
                "  console.log('test fsp3 positions account after',environment.testfsp4PositionBalanceAfter);",
                "",
                "  console.log(`environment.testfsp4InterchFeeBalanceAfter=${environment.testfsp4InterchFeeBalanceAfter}`)",
                "  console.log(`environment.testfsp4InterchFeeBalanceBefore=${environment.testfsp4InterchFeeBalanceBefore}`)",
                "",
                "  console.log(`environment.testfsp4PositionBalanceBefore (${environment.testfsp4PositionBalanceBefore}) == environment.testfsp4PositionBalanceAfter (${environment.testfsp4PositionBalanceAfter})`)",
                "  console.log(`environment.testfsp4SettlementBalanceAfterExpected (${environment.testfsp4SettlementBalanceAfterExpected}) == environment.testfsp4SettlementBalanceAfterActual (${environment.testfsp4SettlementBalanceAfterActual})`)",
                "  console.log(`environment.testfsp4InterchFeeBalanceBefore (${environment.testfsp4InterchFeeBalanceBefore}) == environment.testfsp4InterchFeeBalanceAfter (${environment.testfsp4InterchFeeBalanceAfter})`)",
                "",
                "  if ((environment.testfsp4PositionBalanceBefore == environment.testfsp4PositionBalanceAfter) &&",
                "  (environment.testfsp4SettlementBalanceAfterExpected == environment.testfsp4SettlementBalanceAfterActual) &&",
                "  (environment.testfsp4InterchFeeBalanceBefore == environment.testfsp4InterchFeeBalanceAfter)) {",
                "    console.log('Everything is ok, lets continue')",
                "    break; // lets break out of while loop",
                "  } else {",
                "    console.log(`Everything is NOT OK, lets wait for ${maxRetryWait}ms, and try again...`)",
                "    await custom.sleep(maxRetryWait);",
                "    const axioResponse = await axios.get(`${environment.HOST_CENTRAL_LEDGER}/participants/${environment.SIM4_NAME}/accounts`)",
                "    res = axioResponse.data;",
                "  }",
                "}",
                "",
                "// Store *BalanceBefore in a local variable for assertion test",
                "requestVariables.testfsp4PositionBalanceBefore = environment.testfsp4PositionBalanceBefore",
                "requestVariables.testfsp4InterchFeeBalanceBefore = environment.testfsp4InterchFeeBalanceBefore",
                "",
                "// Reset *Balances for later tests",
                "environment.testfsp4PositionBalanceBefore = environment.testfsp4PositionBalanceAfter",
                "environment.testfsp4SettlementBalanceBefore = environment.testfsp4SettlementBalanceAfter",
                "environment.testfsp4InterchFeeBalanceBefore = environment.testfsp4InterchFeeBalanceAfter",
                "",
                "console.log(`RESET - environment.testfsp4PositionBalanceBefore=${environment.testfsp4PositionBalanceBefore}`)",
                "console.log(`RESET - environment.testfsp4SettlementBalanceBefore=${environment.testfsp4SettlementBalanceBefore}`)",
                "console.log(`RESET - environment.testfsp4InterchFeeBalanceBefore=${environment.testfsp4InterchFeeBalanceBefore}`)",
                ""
              ]
            }
          }
        }
      ]
    }
  ]
}
